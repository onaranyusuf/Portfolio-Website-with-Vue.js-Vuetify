{"ast":null,"code":"import { useProxiedModel } from \"../proxiedModel.mjs\";\nimport { getCurrentInstance, getUid, propsFactory } from \"../../util/index.mjs\";\nimport { computed, inject, onBeforeUnmount, provide, ref } from 'vue';\nimport { listOpenStrategy, multipleOpenStrategy, singleOpenStrategy } from \"./openStrategies.mjs\";\nimport { classicSelectStrategy, independentSelectStrategy, independentSingleSelectStrategy, leafSelectStrategy, leafSingleSelectStrategy } from \"./selectStrategies.mjs\"; // Types\n\nexport const VNestedSymbol = Symbol.for('vuetify:nested');\nexport const emptyNested = {\n  id: ref(),\n  root: {\n    register: () => null,\n    unregister: () => null,\n    parents: ref(new Map()),\n    children: ref(new Map()),\n    open: () => null,\n    select: () => null,\n    opened: ref(new Set()),\n    selected: ref(new Map()),\n    selectedValues: ref([])\n  }\n};\nexport const makeNestedProps = propsFactory({\n  selectStrategy: [String, Function],\n  openStrategy: [String, Function],\n  opened: Array,\n  selected: Array,\n  mandatory: Boolean\n}, 'nested');\nexport const useNested = props => {\n  let isUnmounted = false;\n  const children = ref(new Map());\n  const parents = ref(new Map());\n  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()]);\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy;\n\n    switch (props.selectStrategy) {\n      case 'single-leaf':\n        return leafSingleSelectStrategy(props.mandatory);\n\n      case 'leaf':\n        return leafSelectStrategy(props.mandatory);\n\n      case 'independent':\n        return independentSelectStrategy(props.mandatory);\n\n      case 'single-independent':\n        return independentSingleSelectStrategy(props.mandatory);\n\n      case 'classic':\n      default:\n        return classicSelectStrategy(props.mandatory);\n    }\n  });\n  const openStrategy = computed(() => {\n    if (typeof props.openStrategy === 'function') return props.openStrategy;\n\n    switch (props.openStrategy) {\n      case 'list':\n        return listOpenStrategy;\n\n      case 'single':\n        return singleOpenStrategy;\n\n      case 'multiple':\n      default:\n        return multipleOpenStrategy;\n    }\n  });\n  const selected = useProxiedModel(props, 'selected', props.selected, v => selectStrategy.value.in(v, children.value, parents.value), v => selectStrategy.value.out(v, children.value, parents.value));\n  onBeforeUnmount(() => {\n    isUnmounted = true;\n  });\n\n  function getPath(id) {\n    const path = [];\n    let parent = id;\n\n    while (parent != null) {\n      path.unshift(parent);\n      parent = parents.value.get(parent);\n    }\n\n    return path;\n  }\n\n  const vm = getCurrentInstance('nested');\n  const nested = {\n    id: ref(),\n    root: {\n      opened,\n      selected,\n      selectedValues: computed(() => {\n        const arr = [];\n\n        for (const [key, value] of selected.value.entries()) {\n          if (value === 'on') arr.push(key);\n        }\n\n        return arr;\n      }),\n      register: (id, parentId, isGroup) => {\n        parentId && id !== parentId && parents.value.set(id, parentId);\n        isGroup && children.value.set(id, []);\n\n        if (parentId != null) {\n          children.value.set(parentId, [...(children.value.get(parentId) || []), id]);\n        }\n      },\n      unregister: id => {\n        if (isUnmounted) return;\n        children.value.delete(id);\n        const parent = parents.value.get(id);\n\n        if (parent) {\n          var _children$value$get;\n\n          const list = (_children$value$get = children.value.get(parent)) != null ? _children$value$get : [];\n          children.value.set(parent, list.filter(child => child !== id));\n        }\n\n        parents.value.delete(id);\n        opened.value.delete(id);\n      },\n      open: (id, value, event) => {\n        vm.emit('click:open', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newOpened = openStrategy.value.open({\n          id,\n          value,\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newOpened && (opened.value = newOpened);\n      },\n      select: (id, value, event) => {\n        vm.emit('click:select', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newSelected = selectStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newSelected && (selected.value = newSelected);\n        const newOpened = openStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newOpened && (opened.value = newOpened);\n      },\n      children,\n      parents\n    }\n  };\n  provide(VNestedSymbol, nested);\n  return nested.root;\n};\nexport const useNestedItem = (id, isGroup) => {\n  const parent = inject(VNestedSymbol, emptyNested);\n  const computedId = computed(() => {\n    var _id$value;\n\n    return (_id$value = id.value) != null ? _id$value : getUid().toString();\n  });\n  const item = { ...parent,\n    id: computedId,\n    open: (open, e) => parent.root.open(computedId.value, open, e),\n    isOpen: computed(() => parent.root.opened.value.has(computedId.value)),\n    parent: computed(() => parent.root.parents.value.get(computedId.value)),\n    select: (selected, e) => parent.root.select(computedId.value, selected, e),\n    isSelected: computed(() => parent.root.selected.value.get(computedId.value) === 'on'),\n    isIndeterminate: computed(() => parent.root.selected.value.get(computedId.value) === 'indeterminate'),\n    isLeaf: computed(() => !parent.root.children.value.get(computedId.value)),\n    isGroupActivator: parent.isGroupActivator\n  };\n  !parent.isGroupActivator && parent.root.register(computedId.value, parent.id.value, isGroup);\n  onBeforeUnmount(() => {\n    !parent.isGroupActivator && parent.root.unregister(computedId.value);\n  });\n  isGroup && provide(VNestedSymbol, item);\n  return item;\n};\nexport const useNestedGroupActivator = () => {\n  const parent = inject(VNestedSymbol, emptyNested);\n  provide(VNestedSymbol, { ...parent,\n    isGroupActivator: true\n  });\n};","map":{"version":3,"mappings":"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","names":["useProxiedModel","getCurrentInstance","getUid","propsFactory","computed","inject","onBeforeUnmount","provide","ref","listOpenStrategy","multipleOpenStrategy","singleOpenStrategy","classicSelectStrategy","independentSelectStrategy","independentSingleSelectStrategy","leafSelectStrategy","leafSingleSelectStrategy","VNestedSymbol","Symbol","for","emptyNested","id","root","register","unregister","parents","Map","children","open","select","opened","Set","selected","selectedValues","makeNestedProps","selectStrategy","String","Function","openStrategy","Array","mandatory","Boolean","useNested","props","isUnmounted","v","values","value","in","out","getPath","path","parent","unshift","get","vm","nested","arr","key","entries","push","parentId","isGroup","set","delete","list","filter","child","event","emit","newOpened","newSelected","useNestedItem","computedId","toString","item","e","isOpen","has","isSelected","isIndeterminate","isLeaf","isGroupActivator","useNestedGroupActivator"],"sources":["../../../src/composables/nested/nested.ts"],"sourcesContent":["import { useProxiedModel } from '@/composables/proxiedModel'\nimport { getCurrentInstance, getUid, propsFactory } from '@/util'\nimport { computed, inject, onBeforeUnmount, provide, ref } from 'vue'\nimport { listOpenStrategy, multipleOpenStrategy, singleOpenStrategy } from './openStrategies'\nimport {\n  classicSelectStrategy,\n  independentSelectStrategy,\n  independentSingleSelectStrategy,\n  leafSelectStrategy,\n  leafSingleSelectStrategy,\n} from './selectStrategies'\n\n// Types\nimport type { InjectionKey, Prop, Ref } from 'vue'\nimport type { SelectStrategyFn } from './selectStrategies'\nimport type { OpenStrategy } from './openStrategies'\n\nexport type SelectStrategy = 'single-leaf' | 'leaf' | 'independent' | 'single-independent' | 'classic' | SelectStrategyFn\nexport type OpenStrategyProp = 'single' | 'multiple' | 'list' | OpenStrategy\n\nexport interface NestedProps {\n  selectStrategy: SelectStrategy | undefined\n  openStrategy: OpenStrategyProp | undefined\n  selected: string[] | undefined\n  opened: string[] | undefined\n  mandatory: boolean\n  'onUpdate:selected': ((val: string[]) => void) | undefined\n  'onUpdate:opened': ((val: string[]) => void) | undefined\n}\n\ntype NestedProvide = {\n  id: Ref<string | undefined>\n  isGroupActivator?: boolean\n  root: {\n    children: Ref<Map<string, string[]>>\n    parents: Ref<Map<string, string>>\n    opened: Ref<Set<string>>\n    selected: Ref<Map<string, 'on' | 'off' | 'indeterminate'>>\n    selectedValues: Ref<string[]>\n    register: (id: string, parentId: string | undefined, isGroup?: boolean) => void\n    unregister: (id: string) => void\n    open: (id: string, value: boolean, event?: Event) => void\n    select: (id: string, value: boolean, event?: Event) => void\n  }\n}\n\nexport const VNestedSymbol: InjectionKey<NestedProvide> = Symbol.for('vuetify:nested')\n\nexport const emptyNested: NestedProvide = {\n  id: ref(),\n  root: {\n    register: () => null,\n    unregister: () => null,\n    parents: ref(new Map()),\n    children: ref(new Map()),\n    open: () => null,\n    select: () => null,\n    opened: ref(new Set()),\n    selected: ref(new Map()),\n    selectedValues: ref([]),\n  },\n}\n\nexport const makeNestedProps = propsFactory({\n  selectStrategy: [String, Function] as Prop<SelectStrategy>,\n  openStrategy: [String, Function] as Prop<OpenStrategyProp>,\n  opened: Array as Prop<string[]>,\n  selected: Array as Prop<string[]>,\n  mandatory: Boolean,\n}, 'nested')\n\nexport const useNested = (props: NestedProps) => {\n  let isUnmounted = false\n  const children = ref(new Map<string, string[]>())\n  const parents = ref(new Map<string, string>())\n\n  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()])\n\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy\n\n    switch (props.selectStrategy) {\n      case 'single-leaf': return leafSingleSelectStrategy(props.mandatory)\n      case 'leaf': return leafSelectStrategy(props.mandatory)\n      case 'independent': return independentSelectStrategy(props.mandatory)\n      case 'single-independent': return independentSingleSelectStrategy(props.mandatory)\n      case 'classic':\n      default: return classicSelectStrategy(props.mandatory)\n    }\n  })\n\n  const openStrategy = computed(() => {\n    if (typeof props.openStrategy === 'function') return props.openStrategy\n\n    switch (props.openStrategy) {\n      case 'list': return listOpenStrategy\n      case 'single': return singleOpenStrategy\n      case 'multiple':\n      default: return multipleOpenStrategy\n    }\n  })\n\n  const selected = useProxiedModel(\n    props,\n    'selected',\n    props.selected,\n    v => selectStrategy.value.in(v, children.value, parents.value),\n    v => selectStrategy.value.out(v, children.value, parents.value),\n  )\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function getPath (id: string) {\n    const path: string[] = []\n    let parent: string | undefined = id\n\n    while (parent != null) {\n      path.unshift(parent)\n      parent = parents.value.get(parent)\n    }\n\n    return path\n  }\n\n  const vm = getCurrentInstance('nested')\n\n  const nested: NestedProvide = {\n    id: ref(),\n    root: {\n      opened,\n      selected,\n      selectedValues: computed(() => {\n        const arr = []\n\n        for (const [key, value] of selected.value.entries()) {\n          if (value === 'on') arr.push(key)\n        }\n\n        return arr\n      }),\n      register: (id, parentId, isGroup) => {\n        parentId && id !== parentId && parents.value.set(id, parentId)\n\n        isGroup && children.value.set(id, [])\n\n        if (parentId != null) {\n          children.value.set(parentId, [...children.value.get(parentId) || [], id])\n        }\n      },\n      unregister: id => {\n        if (isUnmounted) return\n\n        children.value.delete(id)\n        const parent = parents.value.get(id)\n        if (parent) {\n          const list = children.value.get(parent) ?? []\n          children.value.set(parent, list.filter(child => child !== id))\n        }\n        parents.value.delete(id)\n        opened.value.delete(id)\n      },\n      open: (id, value, event) => {\n        vm.emit('click:open', { id, value, path: getPath(id), event })\n\n        const newOpened = openStrategy.value.open({\n          id,\n          value,\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n\n        newOpened && (opened.value = newOpened)\n      },\n      select: (id, value, event) => {\n        vm.emit('click:select', { id, value, path: getPath(id), event })\n\n        const newSelected = selectStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n        newSelected && (selected.value = newSelected)\n\n        const newOpened = openStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n        newOpened && (opened.value = newOpened)\n      },\n      children,\n      parents,\n    },\n  }\n\n  provide(VNestedSymbol, nested)\n\n  return nested.root\n}\n\nexport const useNestedItem = (id: Ref<string | undefined>, isGroup: boolean) => {\n  const parent = inject(VNestedSymbol, emptyNested)\n\n  const computedId = computed(() => id.value ?? getUid().toString())\n\n  const item = {\n    ...parent,\n    id: computedId,\n    open: (open: boolean, e: Event) => parent.root.open(computedId.value, open, e),\n    isOpen: computed(() => parent.root.opened.value.has(computedId.value)),\n    parent: computed(() => parent.root.parents.value.get(computedId.value)),\n    select: (selected: boolean, e?: Event) => parent.root.select(computedId.value, selected, e),\n    isSelected: computed(() => parent.root.selected.value.get(computedId.value) === 'on'),\n    isIndeterminate: computed(() => parent.root.selected.value.get(computedId.value) === 'indeterminate'),\n    isLeaf: computed(() => !parent.root.children.value.get(computedId.value)),\n    isGroupActivator: parent.isGroupActivator,\n  }\n\n  !parent.isGroupActivator && parent.root.register(computedId.value, parent.id.value, isGroup)\n\n  onBeforeUnmount(() => {\n    !parent.isGroupActivator && parent.root.unregister(computedId.value)\n  })\n\n  isGroup && provide(VNestedSymbol, item)\n\n  return item\n}\n\nexport const useNestedGroupActivator = () => {\n  const parent = inject(VNestedSymbol, emptyNested)\n\n  provide(VNestedSymbol, { ...parent, isGroupActivator: true })\n}\n"]},"metadata":{},"sourceType":"module"}