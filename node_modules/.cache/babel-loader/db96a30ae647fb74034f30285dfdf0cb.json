{"ast":null,"code":"/** Convert a point in local space to viewport space */\nexport function elementToViewport(point, offset) {\n  return {\n    x: point.x + offset.x,\n    y: point.y + offset.y\n  };\n}\n/** Convert a point in viewport space to local space */\n\nexport function viewportToElement(point, offset) {\n  return {\n    x: point.x - offset.x,\n    y: point.y - offset.y\n  };\n}\n/** Get the difference between two points */\n\nexport function getOffset(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n/** Convert an anchor object to a point in local space */\n\nexport function anchorToPoint(anchor, box) {\n  if (anchor.side === 'top' || anchor.side === 'bottom') {\n    const {\n      side,\n      align\n    } = anchor;\n    const x = align === 'left' ? 0 : align === 'center' ? box.width / 2 : align === 'right' ? box.width : align;\n    const y = side === 'top' ? 0 : side === 'bottom' ? box.height : side;\n    return elementToViewport({\n      x,\n      y\n    }, box);\n  } else if (anchor.side === 'left' || anchor.side === 'right') {\n    const {\n      side,\n      align\n    } = anchor;\n    const x = side === 'left' ? 0 : side === 'right' ? box.width : side;\n    const y = align === 'top' ? 0 : align === 'center' ? box.height / 2 : align === 'bottom' ? box.height : align;\n    return elementToViewport({\n      x,\n      y\n    }, box);\n  }\n\n  return elementToViewport({\n    x: box.width / 2,\n    y: box.height / 2\n  }, box);\n}","map":{"version":3,"mappings":"AAWA;AACA,OAAO,SAASA,iBAAT,CAA4BC,KAA5B,EAAiDC,MAAjD,EAAuE;EAC5E,OAAO;IACLC,CAAC,EAAEF,KAAK,CAACE,CAANF,GAAUC,MAAM,CAACC,CADf;IAELC,CAAC,EAAEH,KAAK,CAACG,CAANH,GAAUC,MAAM,CAACE;EAFf,CAAP;AAID;AAED;;AACA,OAAO,SAASC,iBAAT,CAA4BJ,KAA5B,EAAkDC,MAAlD,EAAwE;EAC7E,OAAO;IACLC,CAAC,EAAEF,KAAK,CAACE,CAANF,GAAUC,MAAM,CAACC,CADf;IAELC,CAAC,EAAEH,KAAK,CAACG,CAANH,GAAUC,MAAM,CAACE;EAFf,CAAP;AAID;AAED;;AACA,OAAO,SAASE,SAAT,CAAqCC,CAArC,EAA2CC,CAA3C,EAAiD;EACtD,OAAO;IACLL,CAAC,EAAEI,CAAC,CAACJ,CAAFI,GAAMC,CAAC,CAACL,CADN;IAELC,CAAC,EAAEG,CAAC,CAACH,CAAFG,GAAMC,CAAC,CAACJ;EAFN,CAAP;AAID;AAED;;AACA,OAAO,SAASK,aAAT,CAAwBC,MAAxB,EAA8CC,GAA9C,EAAuE;EAC5E,IAAID,MAAM,CAACE,IAAPF,KAAgB,KAAhBA,IAAyBA,MAAM,CAACE,IAAPF,KAAgB,QAA7C,EAAuD;IACrD,MAAM;MAAEE,IAAF;MAAQC;IAAR,IAAkBH,MAAxB;IAEA,MAAMP,CAAS,GACbU,KAAK,KAAK,MAAVA,GAAmB,CAAnBA,GACEA,KAAK,KAAK,QAAVA,GAAqBF,GAAG,CAACG,KAAJH,GAAY,CAAjCE,GACAA,KAAK,KAAK,OAAVA,GAAoBF,GAAG,CAACG,KAAxBD,GACAA,KAJJ;IAKA,MAAMT,CAAS,GACbQ,IAAI,KAAK,KAATA,GAAiB,CAAjBA,GACEA,IAAI,KAAK,QAATA,GAAoBD,GAAG,CAACI,MAAxBH,GACAA,IAHJ;IAKA,OAAOZ,iBAAiB,CAAC;MAAEG,CAAF;MAAKC;IAAL,CAAD,EAA2BO,GAA3B,CAAxB;EAbF,OAcO,IAAID,MAAM,CAACE,IAAPF,KAAgB,MAAhBA,IAA0BA,MAAM,CAACE,IAAPF,KAAgB,OAA9C,EAAuD;IAC5D,MAAM;MAAEE,IAAF;MAAQC;IAAR,IAAkBH,MAAxB;IAEA,MAAMP,CAAS,GACbS,IAAI,KAAK,MAATA,GAAkB,CAAlBA,GACEA,IAAI,KAAK,OAATA,GAAmBD,GAAG,CAACG,KAAvBF,GACAA,IAHJ;IAIA,MAAMR,CAAS,GACbS,KAAK,KAAK,KAAVA,GAAkB,CAAlBA,GACEA,KAAK,KAAK,QAAVA,GAAqBF,GAAG,CAACI,MAAJJ,GAAa,CAAlCE,GACAA,KAAK,KAAK,QAAVA,GAAqBF,GAAG,CAACI,MAAzBF,GACAA,KAJJ;IAMA,OAAOb,iBAAiB,CAAC;MAAEG,CAAF;MAAKC;IAAL,CAAD,EAA2BO,GAA3B,CAAxB;EACD;;EAED,OAAOX,iBAAiB,CAAC;IACvBG,CAAC,EAAEQ,GAAG,CAACG,KAAJH,GAAY,CADQ;IAEvBP,CAAC,EAAEO,GAAG,CAACI,MAAJJ,GAAa;EAFO,CAAD,EAGLA,GAHK,CAAxB;AAID","names":["elementToViewport","point","offset","x","y","viewportToElement","getOffset","a","b","anchorToPoint","anchor","box","side","align","width","height"],"sources":["../../../../src/components/VOverlay/util/point.ts"],"sourcesContent":["import type { ParsedAnchor } from '@/util'\nimport type { Box } from '@/util/box'\n\ntype Point = { x: number, y: number }\ndeclare class As<T extends string> {\n  private as: T\n}\ntype ElementPoint = Point & As<'element'>\ntype ViewportPoint = Point & As<'viewport'>\ntype Offset = Point & As<'offset'>\n\n/** Convert a point in local space to viewport space */\nexport function elementToViewport (point: ElementPoint, offset: Offset | Box) {\n  return {\n    x: point.x + offset.x,\n    y: point.y + offset.y,\n  } as ViewportPoint\n}\n\n/** Convert a point in viewport space to local space */\nexport function viewportToElement (point: ViewportPoint, offset: Offset | Box) {\n  return {\n    x: point.x - offset.x,\n    y: point.y - offset.y,\n  } as ElementPoint\n}\n\n/** Get the difference between two points */\nexport function getOffset<T extends Point> (a: T, b: T) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y,\n  } as Offset\n}\n\n/** Convert an anchor object to a point in local space */\nexport function anchorToPoint (anchor: ParsedAnchor, box: Box): ViewportPoint {\n  if (anchor.side === 'top' || anchor.side === 'bottom') {\n    const { side, align } = anchor\n\n    const x: number =\n      align === 'left' ? 0\n      : align === 'center' ? box.width / 2\n      : align === 'right' ? box.width\n      : align\n    const y: number =\n      side === 'top' ? 0\n      : side === 'bottom' ? box.height\n      : side\n\n    return elementToViewport({ x, y } as ElementPoint, box)\n  } else if (anchor.side === 'left' || anchor.side === 'right') {\n    const { side, align } = anchor\n\n    const x: number =\n      side === 'left' ? 0\n      : side === 'right' ? box.width\n      : side\n    const y: number =\n      align === 'top' ? 0\n      : align === 'center' ? box.height / 2\n      : align === 'bottom' ? box.height\n      : align\n\n    return elementToViewport({ x, y } as ElementPoint, box)\n  }\n\n  return elementToViewport({\n    x: box.width / 2,\n    y: box.height / 2,\n  } as ElementPoint, box)\n}\n"]},"metadata":{},"sourceType":"module"}