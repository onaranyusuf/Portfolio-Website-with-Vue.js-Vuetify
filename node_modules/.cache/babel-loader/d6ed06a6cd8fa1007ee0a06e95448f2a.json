{"ast":null,"code":"// Utilities\nimport { convertToUnit, getScrollParents, hasScrollbar, IN_BROWSER, propsFactory } from \"../../util/index.mjs\";\nimport { effectScope, nextTick, onScopeDispose, watchEffect } from 'vue';\nimport { requestNewFrame } from \"./requestNewFrame.mjs\"; // Types\n\nconst scrollStrategies = {\n  none: null,\n  close: closeScrollStrategy,\n  block: blockScrollStrategy,\n  reposition: repositionScrollStrategy\n};\nexport const makeScrollStrategyProps = propsFactory({\n  scrollStrategy: {\n    type: [String, Function],\n    default: 'block',\n    validator: val => typeof val === 'function' || val in scrollStrategies\n  }\n});\nexport function useScrollStrategies(props, data) {\n  if (!IN_BROWSER) return;\n  let scope;\n  watchEffect(async () => {\n    var _scope;\n\n    (_scope = scope) == null ? void 0 : _scope.stop();\n    if (!(data.isActive.value && props.scrollStrategy)) return;\n    scope = effectScope();\n    await nextTick();\n    scope.run(() => {\n      if (typeof props.scrollStrategy === 'function') {\n        props.scrollStrategy(data);\n      } else {\n        var _scrollStrategies$pro;\n\n        (_scrollStrategies$pro = scrollStrategies[props.scrollStrategy]) == null ? void 0 : _scrollStrategies$pro.call(scrollStrategies, data);\n      }\n    });\n  });\n}\n\nfunction closeScrollStrategy(data) {\n  var _data$activatorEl$val;\n\n  function onScroll(e) {\n    data.isActive.value = false;\n  }\n\n  bindScroll((_data$activatorEl$val = data.activatorEl.value) != null ? _data$activatorEl$val : data.contentEl.value, onScroll);\n}\n\nfunction blockScrollStrategy(data) {\n  var _data$root$value;\n\n  const scrollElements = [...new Set([...getScrollParents(data.activatorEl.value), ...getScrollParents(data.contentEl.value)])].filter(el => !el.classList.contains('v-overlay-scroll-blocked'));\n  const scrollbarWidth = window.innerWidth - document.documentElement.offsetWidth;\n\n  const scrollableParent = (el => hasScrollbar(el) && el)(((_data$root$value = data.root.value) == null ? void 0 : _data$root$value.offsetParent) || document.documentElement);\n\n  if (scrollableParent) {\n    data.root.value.classList.add('v-overlay--scroll-blocked');\n  }\n\n  scrollElements.forEach((el, i) => {\n    el.style.setProperty('--v-body-scroll-x', convertToUnit(-el.scrollLeft));\n    el.style.setProperty('--v-body-scroll-y', convertToUnit(-el.scrollTop));\n    el.style.setProperty('--v-scrollbar-offset', convertToUnit(scrollbarWidth));\n    el.classList.add('v-overlay-scroll-blocked');\n  });\n  onScopeDispose(() => {\n    scrollElements.forEach((el, i) => {\n      const x = parseFloat(el.style.getPropertyValue('--v-body-scroll-x'));\n      const y = parseFloat(el.style.getPropertyValue('--v-body-scroll-y'));\n      el.style.removeProperty('--v-body-scroll-x');\n      el.style.removeProperty('--v-body-scroll-y');\n      el.style.removeProperty('--v-scrollbar-offset');\n      el.classList.remove('v-overlay-scroll-blocked');\n      el.scrollLeft = -x;\n      el.scrollTop = -y;\n    });\n\n    if (scrollableParent) {\n      data.root.value.classList.remove('v-overlay--scroll-blocked');\n    }\n  });\n}\n\nfunction repositionScrollStrategy(data) {\n  var _data$activatorEl$val2;\n\n  let slow = false;\n  let raf = -1;\n\n  function update(e) {\n    requestNewFrame(() => {\n      var _data$updateLocation$, _data$updateLocation;\n\n      const start = performance.now();\n      (_data$updateLocation$ = (_data$updateLocation = data.updateLocation).value) == null ? void 0 : _data$updateLocation$.call(_data$updateLocation, e);\n      const time = performance.now() - start;\n      slow = time / (1000 / 60) > 2;\n    });\n  }\n\n  bindScroll((_data$activatorEl$val2 = data.activatorEl.value) != null ? _data$activatorEl$val2 : data.contentEl.value, e => {\n    if (slow) {\n      // If the position calculation is slow,\n      // defer updates until scrolling is finished.\n      // Browsers usually fire one scroll event per frame so\n      // we just wait until we've got two frames without an event\n      cancelAnimationFrame(raf);\n      raf = requestAnimationFrame(() => {\n        raf = requestAnimationFrame(() => {\n          update(e);\n        });\n      });\n    } else {\n      update(e);\n    }\n  });\n}\n/** @private */\n\n\nfunction bindScroll(el, onScroll) {\n  const scrollElements = [document, ...getScrollParents(el)];\n  scrollElements.forEach(el => {\n    el.addEventListener('scroll', onScroll, {\n      passive: true\n    });\n  });\n  onScopeDispose(() => {\n    scrollElements.forEach(el => {\n      el.removeEventListener('scroll', onScroll);\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["convertToUnit","getScrollParents","hasScrollbar","IN_BROWSER","propsFactory","effectScope","nextTick","onScopeDispose","watchEffect","requestNewFrame","scrollStrategies","none","close","closeScrollStrategy","block","blockScrollStrategy","reposition","repositionScrollStrategy","makeScrollStrategyProps","scrollStrategy","type","String","Function","default","validator","val","useScrollStrategies","props","data","scope","stop","isActive","value","run","onScroll","e","bindScroll","activatorEl","contentEl","scrollElements","Set","filter","el","classList","contains","scrollbarWidth","window","innerWidth","document","documentElement","offsetWidth","scrollableParent","root","offsetParent","add","forEach","i","style","setProperty","scrollLeft","scrollTop","x","parseFloat","getPropertyValue","y","removeProperty","remove","slow","raf","update","start","performance","now","updateLocation","time","cancelAnimationFrame","requestAnimationFrame","addEventListener","passive","removeEventListener"],"sources":["../../../src/components/VOverlay/scrollStrategies.ts"],"sourcesContent":["// Utilities\nimport { convertToUnit, getScrollParents, hasScrollbar, IN_BROWSER, propsFactory } from '@/util'\nimport { effectScope, nextTick, onScopeDispose, watchEffect } from 'vue'\nimport { requestNewFrame } from './requestNewFrame'\n\n// Types\nimport type { EffectScope, PropType, Ref } from 'vue'\n\nexport interface ScrollStrategyData {\n  root: Ref<HTMLElement | undefined>\n  contentEl: Ref<HTMLElement | undefined>\n  activatorEl: Ref<HTMLElement | undefined>\n  isActive: Ref<boolean>\n  updateLocation: Ref<((e: Event) => void) | undefined>\n}\n\nconst scrollStrategies = {\n  none: null,\n  close: closeScrollStrategy,\n  block: blockScrollStrategy,\n  reposition: repositionScrollStrategy,\n}\n\ninterface StrategyProps {\n  scrollStrategy: keyof typeof scrollStrategies | ((data: ScrollStrategyData) => void)\n}\n\nexport const makeScrollStrategyProps = propsFactory({\n  scrollStrategy: {\n    type: [String, Function] as PropType<StrategyProps['scrollStrategy']>,\n    default: 'block',\n    validator: (val: any) => typeof val === 'function' || val in scrollStrategies,\n  },\n})\n\nexport function useScrollStrategies (\n  props: StrategyProps,\n  data: ScrollStrategyData\n) {\n  if (!IN_BROWSER) return\n\n  let scope: EffectScope | undefined\n  watchEffect(async () => {\n    scope?.stop()\n\n    if (!(data.isActive.value && props.scrollStrategy)) return\n\n    scope = effectScope()\n    await nextTick()\n    scope.run(() => {\n      if (typeof props.scrollStrategy === 'function') {\n        props.scrollStrategy(data)\n      } else {\n        scrollStrategies[props.scrollStrategy]?.(data)\n      }\n    })\n  })\n}\n\nfunction closeScrollStrategy (data: ScrollStrategyData) {\n  function onScroll (e: Event) {\n    data.isActive.value = false\n  }\n\n  bindScroll(data.activatorEl.value ?? data.contentEl.value, onScroll)\n}\n\nfunction blockScrollStrategy (data: ScrollStrategyData) {\n  const scrollElements = [...new Set([\n    ...getScrollParents(data.activatorEl.value),\n    ...getScrollParents(data.contentEl.value),\n  ])].filter(el => !el.classList.contains('v-overlay-scroll-blocked'))\n  const scrollbarWidth = window.innerWidth - document.documentElement.offsetWidth\n\n  const scrollableParent = (el => hasScrollbar(el) && el)(data.root.value?.offsetParent || document.documentElement)\n  if (scrollableParent) {\n    data.root.value!.classList.add('v-overlay--scroll-blocked')\n  }\n\n  scrollElements.forEach((el, i) => {\n    el.style.setProperty('--v-body-scroll-x', convertToUnit(-el.scrollLeft))\n    el.style.setProperty('--v-body-scroll-y', convertToUnit(-el.scrollTop))\n    el.style.setProperty('--v-scrollbar-offset', convertToUnit(scrollbarWidth))\n    el.classList.add('v-overlay-scroll-blocked')\n  })\n\n  onScopeDispose(() => {\n    scrollElements.forEach((el, i) => {\n      const x = parseFloat(el.style.getPropertyValue('--v-body-scroll-x'))\n      const y = parseFloat(el.style.getPropertyValue('--v-body-scroll-y'))\n\n      el.style.removeProperty('--v-body-scroll-x')\n      el.style.removeProperty('--v-body-scroll-y')\n      el.style.removeProperty('--v-scrollbar-offset')\n      el.classList.remove('v-overlay-scroll-blocked')\n\n      el.scrollLeft = -x\n      el.scrollTop = -y\n    })\n    if (scrollableParent) {\n      data.root.value!.classList.remove('v-overlay--scroll-blocked')\n    }\n  })\n}\n\nfunction repositionScrollStrategy (data: ScrollStrategyData) {\n  let slow = false\n  let raf = -1\n\n  function update (e: Event) {\n    requestNewFrame(() => {\n      const start = performance.now()\n      data.updateLocation.value?.(e)\n      const time = performance.now() - start\n      slow = time / (1000 / 60) > 2\n    })\n  }\n\n  bindScroll(data.activatorEl.value ?? data.contentEl.value, e => {\n    if (slow) {\n      // If the position calculation is slow,\n      // defer updates until scrolling is finished.\n      // Browsers usually fire one scroll event per frame so\n      // we just wait until we've got two frames without an event\n      cancelAnimationFrame(raf)\n      raf = requestAnimationFrame(() => {\n        raf = requestAnimationFrame(() => {\n          update(e)\n        })\n      })\n    } else {\n      update(e)\n    }\n  })\n}\n\n/** @private */\nfunction bindScroll (el: HTMLElement | undefined, onScroll: (e: Event) => void) {\n  const scrollElements = [document, ...getScrollParents(el)]\n  scrollElements.forEach(el => {\n    el.addEventListener('scroll', onScroll, { passive: true })\n  })\n\n  onScopeDispose(() => {\n    scrollElements.forEach(el => {\n      el.removeEventListener('scroll', onScroll)\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}