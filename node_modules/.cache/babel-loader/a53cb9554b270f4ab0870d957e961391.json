{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Icons\n\nimport { aliases, mdi } from \"../iconsets/mdi.mjs\"; // Utilities\n\nimport { computed, inject, isRef } from 'vue';\nimport { defineComponent, mergeDeep, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport const IconValue = [String, Function, Object];\nexport const IconSymbol = Symbol.for('vuetify:icons');\nexport const makeIconProps = propsFactory({\n  icon: {\n    type: IconValue,\n    required: true\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true\n  }\n}, 'icon');\nexport const VComponentIcon = defineComponent({\n  name: 'VComponentIcon',\n  props: makeIconProps(),\n\n  setup(props) {\n    return () => {\n      return _createVNode(props.tag, null, {\n        default: () => [_createVNode(props.icon, null, null)]\n      });\n    };\n  }\n\n});\nexport const VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n  inheritAttrs: false,\n  props: makeIconProps(),\n\n  setup(props, _ref) {\n    let {\n      attrs\n    } = _ref;\n    return () => {\n      return _createVNode(props.tag, _mergeProps(attrs, {\n        \"style\": null\n      }), {\n        default: () => [_createVNode(\"svg\", {\n          \"class\": \"v-icon__svg\",\n          \"xmlns\": \"http://www.w3.org/2000/svg\",\n          \"viewBox\": \"0 0 24 24\",\n          \"role\": \"img\",\n          \"aria-hidden\": \"true\"\n        }, [_createVNode(\"path\", {\n          \"d\": props.icon\n        }, null)])]\n      });\n    };\n  }\n\n});\nexport const VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n  props: makeIconProps(),\n\n  setup(props) {\n    return () => {\n      return _createVNode(props.tag, null, {\n        default: () => [props.icon]\n      });\n    };\n  }\n\n});\nexport const VClassIcon = defineComponent({\n  name: 'VClassIcon',\n  props: makeIconProps(),\n\n  setup(props) {\n    return () => {\n      return _createVNode(props.tag, {\n        \"class\": props.icon\n      }, null);\n    };\n  }\n\n});\nexport const defaultSets = {\n  svg: {\n    component: VSvgIcon\n  },\n  class: {\n    component: VClassIcon\n  }\n}; // Composables\n\nexport function createIcons(options) {\n  return mergeDeep({\n    defaultSet: 'mdi',\n    sets: { ...defaultSets,\n      mdi\n    },\n    aliases\n  }, options);\n}\nexport const useIcon = props => {\n  const icons = inject(IconSymbol);\n  if (!icons) throw new Error('Missing Vuetify Icons provide!');\n  const iconData = computed(() => {\n    const iconAlias = isRef(props) ? props.value : props.icon;\n    if (!iconAlias) throw new Error('Icon value is undefined or null');\n    let icon = iconAlias;\n\n    if (typeof iconAlias === 'string' && iconAlias.includes('$')) {\n      var _icons$aliases;\n\n      icon = (_icons$aliases = icons.aliases) == null ? void 0 : _icons$aliases[iconAlias.slice(iconAlias.indexOf('$') + 1)];\n    }\n\n    if (!icon) throw new Error(`Could not find aliased icon \"${iconAlias}\"`);\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon\n      };\n    }\n\n    const iconSetName = Object.keys(icons.sets).find(setName => typeof icon === 'string' && icon.startsWith(`${setName}:`));\n    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon;\n    const iconSet = icons.sets[iconSetName != null ? iconSetName : icons.defaultSet];\n    return {\n      component: iconSet.component,\n      icon: iconName\n    };\n  });\n  return {\n    iconData\n  };\n};","map":{"version":3,"mappings":"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","names":["aliases","mdi","computed","inject","isRef","defineComponent","mergeDeep","propsFactory","IconValue","String","Function","Object","IconSymbol","Symbol","for","makeIconProps","icon","type","required","tag","VComponentIcon","name","props","setup","default","VSvgIcon","inheritAttrs","attrs","_ref","VLigatureIcon","VClassIcon","defaultSets","svg","component","class","createIcons","options","defaultSet","sets","useIcon","icons","Error","iconData","iconAlias","value","includes","_icons$aliases","slice","indexOf","iconSetName","keys","find","setName","startsWith","iconName","length","iconSet"],"sources":["../../src/composables/icons.tsx"],"sourcesContent":["// Icons\nimport { aliases, mdi } from '@/iconsets/mdi'\n\n// Utilities\nimport { computed, inject, isRef } from 'vue'\nimport { defineComponent, mergeDeep, propsFactory } from '@/util'\n\n// Types\nimport type { InjectionKey, JSXComponent, PropType, Ref } from 'vue'\n\nexport type IconValue = string | JSXComponent\nexport const IconValue = [String, Function, Object] as PropType<IconValue>\n\nexport interface IconAliases {\n  [name: string]: IconValue\n  complete: IconValue\n  cancel: IconValue\n  close: IconValue\n  delete: IconValue\n  clear: IconValue\n  success: IconValue\n  info: IconValue\n  warning: IconValue\n  error: IconValue\n  prev: IconValue\n  next: IconValue\n  checkboxOn: IconValue\n  checkboxOff: IconValue\n  checkboxIndeterminate: IconValue\n  delimiter: IconValue\n  sort: IconValue\n  expand: IconValue\n  menu: IconValue\n  subgroup: IconValue\n  dropdown: IconValue\n  radioOn: IconValue\n  radioOff: IconValue\n  edit: IconValue\n  ratingEmpty: IconValue\n  ratingFull: IconValue\n  ratingHalf: IconValue\n  loading: IconValue\n  first: IconValue\n  last: IconValue\n  unfold: IconValue\n  file: IconValue\n  plus: IconValue\n  minus: IconValue\n}\n\nexport interface IconProps {\n  tag: string\n  icon: IconValue\n  disabled?: Boolean\n}\n\ntype IconComponent = JSXComponent<IconProps>\n\nexport interface IconSet {\n  component: IconComponent\n}\n\nexport type IconOptions = {\n  defaultSet: string\n  aliases?: Partial<IconAliases>\n  sets: Record<string, IconSet>\n}\n\ntype IconInstance = {\n  component: IconComponent\n  icon: IconValue\n}\n\nexport const IconSymbol: InjectionKey<IconOptions> = Symbol.for('vuetify:icons')\n\nexport const makeIconProps = propsFactory({\n  icon: {\n    type: IconValue,\n    required: true,\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true,\n  },\n}, 'icon')\n\nexport const VComponentIcon = defineComponent({\n  name: 'VComponentIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return (\n        <props.tag>\n          <props.icon />\n        </props.tag>\n      )\n    }\n  },\n})\n\nexport const VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n\n  inheritAttrs: false,\n\n  props: makeIconProps(),\n\n  setup (props, { attrs }) {\n    return () => {\n      return (\n        <props.tag { ...attrs } style={ null }>\n          <svg\n            class=\"v-icon__svg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            role=\"img\"\n            aria-hidden=\"true\"\n          >\n            <path d={ props.icon as string }></path>\n          </svg>\n        </props.tag>\n      )\n    }\n  },\n})\n\nexport const VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag>{ props.icon }</props.tag>\n    }\n  },\n})\n\nexport const VClassIcon = defineComponent({\n  name: 'VClassIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag class={ props.icon }></props.tag>\n    }\n  },\n})\n\nexport const defaultSets: Record<string, IconSet> = {\n  svg: {\n    component: VSvgIcon,\n  },\n  class: {\n    component: VClassIcon,\n  },\n}\n\n// Composables\nexport function createIcons (options?: IconOptions) {\n  return mergeDeep({\n    defaultSet: 'mdi',\n    sets: {\n      ...defaultSets,\n      mdi,\n    },\n    aliases,\n  }, options)\n}\n\nexport const useIcon = (props: Ref<string | undefined> | { icon?: IconValue }) => {\n  const icons = inject(IconSymbol)\n\n  if (!icons) throw new Error('Missing Vuetify Icons provide!')\n\n  const iconData: Ref<IconInstance> = computed(() => {\n    const iconAlias = isRef(props) ? props.value : props.icon\n\n    if (!iconAlias) throw new Error('Icon value is undefined or null')\n\n    let icon: IconValue | undefined = iconAlias\n\n    if (typeof iconAlias === 'string' && iconAlias.includes('$')) {\n      icon = icons.aliases?.[iconAlias.slice(iconAlias.indexOf('$') + 1)]\n    }\n\n    if (!icon) throw new Error(`Could not find aliased icon \"${iconAlias}\"`)\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon,\n      }\n    }\n\n    const iconSetName = Object.keys(icons.sets).find(\n      setName => typeof icon === 'string' && icon.startsWith(`${setName}:`)\n    )\n\n    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon\n    const iconSet = icons.sets[iconSetName ?? icons.defaultSet]\n\n    return {\n      component: iconSet.component,\n      icon: iconName,\n    }\n  })\n\n  return { iconData }\n}\n"]},"metadata":{},"sourceType":"module"}