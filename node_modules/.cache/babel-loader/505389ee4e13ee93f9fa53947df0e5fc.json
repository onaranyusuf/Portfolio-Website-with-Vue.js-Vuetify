{"ast":null,"code":"import { withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, vModelText as _vModelText, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VTextarea.css\"; // Components\n\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\";\nimport { VField } from \"../VField/index.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Composables\n\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue';\nimport { convertToUnit, defineComponent, filterInputAttrs, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VTextarea = defineComponent({\n  name: 'VTextarea',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: v => !isNaN(parseFloat(v))\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: v => !isNaN(parseFloat(v))\n    },\n    suffix: String,\n    ...makeVInputProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'click:clear': e => true,\n    'click:control': e => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      var _entries$0$target, _entries$0$target$foc;\n\n      if (!props.autofocus || !isIntersecting) return;\n      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);\n    }\n\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const isFocused = ref(false);\n    const controlHeight = ref('auto');\n    const textareaRef = ref();\n    const isActive = computed(() => isFocused.value || props.persistentPlaceholder);\n    const messages = computed(() => {\n      return props.messages.length ? props.messages : isActive.value || props.persistentHint ? props.hint : '';\n    });\n\n    function onFocus() {\n      if (textareaRef.value !== document.activeElement) {\n        var _textareaRef$value;\n\n        (_textareaRef$value = textareaRef.value) == null ? void 0 : _textareaRef$value.focus();\n      }\n\n      if (!isFocused.value) isFocused.value = true;\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = '';\n        emit('click:clear', e);\n      });\n    }\n\n    const sizerRef = ref();\n\n    function calculateInputHeight() {\n      if (!props.autoGrow) return;\n      nextTick(() => {\n        if (!sizerRef.value) return;\n        const style = getComputedStyle(sizerRef.value);\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) + parseFloat(style.getPropertyValue('--v-field-padding-bottom'));\n        const height = sizerRef.value.scrollHeight;\n        const lineHeight = parseFloat(style.lineHeight);\n        const minHeight = parseFloat(props.rows) * lineHeight + padding;\n        const maxHeight = parseFloat(props.maxRows) * lineHeight + padding || Infinity;\n        controlHeight.value = convertToUnit(Math.min(maxHeight, Math.max(minHeight, height != null ? height : 0)));\n      });\n    }\n\n    onMounted(calculateInputHeight);\n    watch(model, calculateInputHeight);\n    watch(() => props.rows, calculateInputHeight);\n    watch(() => props.maxRows, calculateInputHeight);\n    let observer;\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight);\n        observer.observe(sizerRef.value);\n      } else {\n        var _observer;\n\n        (_observer = observer) == null ? void 0 : _observer.disconnect();\n      }\n    });\n    onBeforeUnmount(() => {\n      var _observer2;\n\n      (_observer2 = observer) == null ? void 0 : _observer2.disconnect();\n    });\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = filterInputProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-textarea', {\n          'v-textarea--prefixed': props.prefix,\n          'v-textarea--suffixed': props.suffix,\n          'v-textarea--auto-grow': props.autoGrow,\n          'v-textarea--no-resize': props.noResize || props.autoGrow\n        }]\n      }, rootAttrs, inputProps, {\n        \"messages\": messages.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"style\": {\n              '--v-input-control-height': controlHeight.value\n            },\n            \"onClick:control\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), { ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _withDirectives(_createVNode(\"textarea\", _mergeProps({\n                \"ref\": textareaRef,\n                \"class\": fieldClass,\n                \"onUpdate:modelValue\": $event => model.value = $event,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"placeholder\": props.placeholder,\n                \"rows\": props.rows,\n                \"name\": props.name,\n                \"onFocus\": onFocus,\n                \"onBlur\": () => isFocused.value = false\n              }, slotProps, inputAttrs), null), [[_vModelText, model.value], [_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]), props.autoGrow && _withDirectives(_createVNode(\"textarea\", {\n                \"class\": [fieldClass, 'v-textarea__sizer'],\n                \"onUpdate:modelValue\": $event => model.value = $event,\n                \"ref\": sizerRef,\n                \"readonly\": true,\n                \"aria-hidden\": \"true\"\n              }, null), [[_vModelText, model.value]]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasCounter ? () => _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value\n        }, slots.counter)]) : undefined\n      });\n    });\n    return useForwardRef({}, vInputRef, vFieldRef, textareaRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","filterInputProps","makeVInputProps","VInput","VCounter","VField","Intersect","useForwardRef","useProxiedModel","computed","nextTick","onBeforeUnmount","onMounted","ref","watch","convertToUnit","defineComponent","filterInputAttrs","useRender","VTextarea","name","directives","inheritAttrs","props","autoGrow","Boolean","autofocus","counter","Number","String","counterValue","Function","hint","persistentHint","prefix","placeholder","persistentPlaceholder","persistentCounter","noResize","rows","type","default","validator","v","isNaN","parseFloat","maxRows","suffix","emits","e","val","setup","attrs","emit","slots","_ref","model","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","focus","vInputRef","vFieldRef","isFocused","controlHeight","textareaRef","isActive","messages","onFocus","document","activeElement","onControlClick","onClear","stopPropagation","sizerRef","calculateInputHeight","style","getComputedStyle","padding","getPropertyValue","height","scrollHeight","lineHeight","minHeight","maxHeight","Infinity","Math","min","observer","ResizeObserver","observe","disconnect","hasCounter","rootAttrs","inputAttrs","modelValue","_","inputProps","fieldProps","$event","_ref2","isDisabled","isDirty","isReadonly","isValid","dirty","_ref3","class","fieldClass","slotProps","handler","once","details"],"sources":["../../../src/components/VTextarea/VTextarea.tsx"],"sourcesContent":["// Styles\nimport './VTextarea.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { convertToUnit, defineComponent, filterInputAttrs, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VTextarea = defineComponent({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    suffix: String,\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:clear': (e: MouseEvent) => true,\n    'click:control': (e: MouseEvent) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const isFocused = ref(false)\n    const controlHeight = ref('auto')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      isFocused.value ||\n      props.persistentPlaceholder\n    ))\n\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isActive.value || props.persistentHint) ? props.hint : ''\n    })\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) isFocused.value = true\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        emit('click:clear', e)\n      })\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n        parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = parseFloat(props.rows) * lineHeight + padding\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n\n        controlHeight.value = convertToUnit(Math.min(maxHeight, Math.max(minHeight, height ?? 0)))\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          v-model={ model.value }\n          class={[\n            'v-textarea',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n            },\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                style={{\n                  '--v-input-control-height': controlHeight.value,\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      ) }\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        v-model={ model.value }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ () => (isFocused.value = false) }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      ) }\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasCounter ? () => (\n              <>\n                <span />\n\n                <VCounter\n                  active={ props.persistentCounter || isFocused.value }\n                  value={ counterValue.value }\n                  max={ max.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return useForwardRef({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"]},"metadata":{},"sourceType":"module"}