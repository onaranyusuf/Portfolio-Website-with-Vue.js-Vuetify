{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VTabs.css\"; // Components\n\nimport { VSlideGroup } from \"../VSlideGroup/index.mjs\";\nimport { VTab } from \"./VTab.mjs\"; // Composables\n\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nimport { VTabsSymbol } from \"./shared.mjs\";\n\nfunction parseItems(items) {\n  if (!items) return [];\n  return items.map(item => {\n    if (typeof item === 'string') return {\n      title: item,\n      value: item\n    };\n    return item;\n  });\n}\n\nexport const VTabs = defineComponent({\n  name: 'VTabs',\n  props: {\n    alignWithTitle: Boolean,\n    color: String,\n    direction: {\n      type: String,\n      default: 'horizontal'\n    },\n    fixedTabs: Boolean,\n    items: {\n      type: Array,\n      default: () => []\n    },\n    stacked: Boolean,\n    backgroundColor: String,\n    centered: Boolean,\n    grow: Boolean,\n    height: {\n      type: [Number, String],\n      default: undefined\n    },\n    hideSlider: Boolean,\n    optional: Boolean,\n    end: Boolean,\n    sliderColor: String,\n    modelValue: null,\n    ...makeDensityProps(),\n    ...makeTagProps()\n  },\n  emits: {\n    'update:modelValue': v => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      emit\n    } = _ref;\n    const parsedItems = computed(() => parseItems(props.items));\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'backgroundColor'));\n    provideDefaults({\n      VTab: {\n        color: toRef(props, 'color'),\n        direction: toRef(props, 'direction'),\n        stacked: toRef(props, 'stacked'),\n        fixed: toRef(props, 'fixedTabs'),\n        sliderColor: toRef(props, 'sliderColor'),\n        hideSlider: toRef(props, 'hideSlider')\n      }\n    });\n    useRender(() => _createVNode(VSlideGroup, {\n      \"class\": ['v-tabs', `v-tabs--${props.direction}`, {\n        'v-tabs--align-with-title': props.alignWithTitle,\n        'v-tabs--centered': props.centered,\n        'v-tabs--fixed-tabs': props.fixedTabs,\n        'v-tabs--grow': props.grow,\n        'v-tabs--end': props.end,\n        'v-tabs--stacked': props.stacked\n      }, densityClasses.value, backgroundColorClasses.value],\n      \"style\": backgroundColorStyles.value,\n      \"role\": \"tablist\",\n      \"symbol\": VTabsSymbol,\n      \"mandatory\": \"force\",\n      \"direction\": props.direction,\n      \"modelValue\": props.modelValue,\n      \"onUpdate:modelValue\": v => emit('update:modelValue', v)\n    }, {\n      default: () => [slots.default ? slots.default() : parsedItems.value.map(item => _createVNode(VTab, _mergeProps(item, {\n        \"key\": item.title\n      }), null))]\n    }));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VSlideGroup","VTab","makeDensityProps","useDensity","makeTagProps","provideDefaults","useBackgroundColor","computed","toRef","defineComponent","useRender","VTabsSymbol","parseItems","items","map","item","title","value","VTabs","name","props","alignWithTitle","Boolean","color","String","direction","type","default","fixedTabs","Array","stacked","backgroundColor","centered","grow","height","Number","undefined","hideSlider","optional","end","sliderColor","modelValue","emits","v","setup","slots","emit","_ref","parsedItems","densityClasses","backgroundColorClasses","backgroundColorStyles","fixed"],"sources":["../../../src/components/VTabs/VTabs.tsx"],"sourcesContent":["// Styles\nimport './VTabs.sass'\n\n// Components\nimport { VSlideGroup } from '@/components/VSlideGroup'\nimport { VTab } from './VTab'\n\n// Composables\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeTagProps } from '@/composables/tag'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\n// Types\nimport { VTabsSymbol } from './shared'\nimport type { PropType } from 'vue'\n\nexport type TabItem = string | Record<string, any>\n\nfunction parseItems (items: TabItem[] | undefined) {\n  if (!items) return []\n\n  return items.map(item => {\n    if (typeof item === 'string') return { title: item, value: item }\n\n    return item\n  })\n}\n\nexport const VTabs = defineComponent({\n  name: 'VTabs',\n\n  props: {\n    alignWithTitle: Boolean,\n    color: String,\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n    fixedTabs: Boolean,\n    items: {\n      type: Array as PropType<TabItem[]>,\n      default: () => ([]),\n    },\n    stacked: Boolean,\n    backgroundColor: String,\n    centered: Boolean,\n    grow: Boolean,\n    height: {\n      type: [Number, String],\n      default: undefined,\n    },\n    hideSlider: Boolean,\n    optional: Boolean,\n    end: Boolean,\n    sliderColor: String,\n    modelValue: null,\n\n    ...makeDensityProps(),\n    ...makeTagProps(),\n  },\n\n  emits: {\n    'update:modelValue': (v: unknown) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const parsedItems = computed(() => parseItems(props.items))\n    const { densityClasses } = useDensity(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'backgroundColor'))\n\n    provideDefaults({\n      VTab: {\n        color: toRef(props, 'color'),\n        direction: toRef(props, 'direction'),\n        stacked: toRef(props, 'stacked'),\n        fixed: toRef(props, 'fixedTabs'),\n        sliderColor: toRef(props, 'sliderColor'),\n        hideSlider: toRef(props, 'hideSlider'),\n      },\n    })\n\n    useRender(() => (\n      <VSlideGroup\n        class={[\n          'v-tabs',\n          `v-tabs--${props.direction}`,\n          {\n            'v-tabs--align-with-title': props.alignWithTitle,\n            'v-tabs--centered': props.centered,\n            'v-tabs--fixed-tabs': props.fixedTabs,\n            'v-tabs--grow': props.grow,\n            'v-tabs--end': props.end,\n            'v-tabs--stacked': props.stacked,\n          },\n          densityClasses.value,\n          backgroundColorClasses.value,\n        ]}\n        style={backgroundColorStyles.value}\n        role=\"tablist\"\n        symbol={ VTabsSymbol }\n        mandatory=\"force\"\n        direction={ props.direction }\n        modelValue={ props.modelValue }\n        onUpdate:modelValue={ v => emit('update:modelValue', v) }\n      >\n        { slots.default ? slots.default() : parsedItems.value.map(item => (\n          <VTab { ...item } key={ item.title } />\n        )) }\n      </VSlideGroup>\n    ))\n\n    return {}\n  },\n})\n\nexport type VTabs = InstanceType<typeof VTabs>\n"]},"metadata":{},"sourceType":"module"}