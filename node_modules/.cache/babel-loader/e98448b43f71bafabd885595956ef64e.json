{"ast":null,"code":"// Composables\nimport { useRtl } from \"./rtl.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { parseAnchor, propsFactory } from \"../util/index.mjs\"; // Types\n\nconst oppositeMap = {\n  center: 'center',\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left'\n};\nexport const makeLocationProps = propsFactory({\n  location: String\n}, 'location');\nexport function useLocation(props) {\n  let opposite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let offset = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    isRtl\n  } = useRtl();\n  const locationStyles = computed(() => {\n    if (!props.location) return {};\n    const {\n      side,\n      align\n    } = parseAnchor(props.location.split(' ').length > 1 ? props.location : `${props.location} center`, isRtl.value);\n\n    function getOffset(side) {\n      return offset ? offset(side) : 0;\n    }\n\n    const styles = {};\n\n    if (side !== 'center') {\n      if (opposite) styles[oppositeMap[side]] = `calc(100% - ${getOffset(side)}px)`;else styles[side] = 0;\n    }\n\n    if (align !== 'center') {\n      if (opposite) styles[oppositeMap[align]] = `calc(100% - ${getOffset(align)}px)`;else styles[align] = 0;\n    } else {\n      if (side === 'center') styles.top = styles.left = '50%';else {\n        styles[{\n          top: 'left',\n          bottom: 'left',\n          left: 'top',\n          right: 'top'\n        }[side]] = '50%';\n      }\n      styles.transform = {\n        top: 'translateX(-50%)',\n        bottom: 'translateX(-50%)',\n        left: 'translateY(-50%)',\n        right: 'translateY(-50%)',\n        center: 'translate(-50%, -50%)'\n      }[side];\n    }\n\n    return styles;\n  });\n  return {\n    locationStyles\n  };\n}","map":{"version":3,"mappings":"AAAA;SACSA,c,aAET;;AACA,SAASC,QAAT,QAAyB,KAAzB;SACSC,aAAaC,oB,qBAEtB;;AAIA,MAAMC,WAAW,GAAG;EAClBC,MAAM,EAAE,QADU;EAElBC,GAAG,EAAE,QAFa;EAGlBC,MAAM,EAAE,KAHU;EAIlBC,IAAI,EAAE,OAJY;EAKlBC,KAAK,EAAE;AALW,CAApB;AAYA,OAAO,MAAMC,iBAAiB,GAAGP,YAAY,CAAC;EAC5CQ,QAAQ,EAAEC;AADkC,CAAD,EAE1C,UAF0C,CAAtC;AAIP,OAAO,SAASC,WAAT,CAAsBC,KAAtB,EAAiG;EAAA,IAArDC,QAAqD,uEAA1C,KAA0C;EAAA,IAAnCC,MAAmC;EACtG,MAAM;IAAEC;EAAF,IAAYjB,MAAM,EAAxB;EAEA,MAAMkB,cAAc,GAAGjB,QAAQ,CAAC,MAAM;IACpC,IAAI,CAACa,KAAK,CAACH,QAAX,EAAqB,OAAO,EAAP;IAErB,MAAM;MAAEQ,IAAF;MAAQC;IAAR,IAAkBlB,WAAW,CACjCY,KAAK,CAACH,QAANG,CAAeO,KAAfP,CAAqB,GAArBA,EAA0BQ,MAA1BR,GAAmC,CAAnCA,GACIA,KAAK,CAACH,QADVG,GAEK,GAAEA,KAAK,CAACH,QAAS,SAHW,EAIjCM,KAAK,CAACM,KAJ2B,CAAnC;;IAOA,SAASC,SAAT,CAAoBL,IAApB,EAAkC;MAChC,OAAOH,MAAM,GACTA,MAAM,CAACG,IAAD,CADG,GAET,CAFJ;IAGD;;IAED,MAAMM,MAAM,GAAG,EAAf;;IAEA,IAAIN,IAAI,KAAK,QAAb,EAAuB;MACrB,IAAIJ,QAAJ,EAAcU,MAAM,CAACrB,WAAW,CAACe,IAAD,CAAZ,CAANM,GAA6B,eAAcD,SAAS,CAACL,IAAD,CAAO,KAA3DM,CAAd,KACKA,MAAM,CAACN,IAAD,CAANM,GAAe,CAAfA;IACN;;IACD,IAAIL,KAAK,KAAK,QAAd,EAAwB;MACtB,IAAIL,QAAJ,EAAcU,MAAM,CAACrB,WAAW,CAACgB,KAAD,CAAZ,CAANK,GAA8B,eAAcD,SAAS,CAACJ,KAAD,CAAQ,KAA7DK,CAAd,KACKA,MAAM,CAACL,KAAD,CAANK,GAAgB,CAAhBA;IAFP,OAGO;MACL,IAAIN,IAAI,KAAK,QAAb,EAAuBM,MAAM,CAACnB,GAAPmB,GAAaA,MAAM,CAACjB,IAAPiB,GAAc,KAA3BA,CAAvB,KACK;QACHA,MAAM,CAAE;UACNnB,GAAG,EAAE,MADC;UAENC,MAAM,EAAE,MAFF;UAGNC,IAAI,EAAE,KAHA;UAINC,KAAK,EAAE;QAJD,EAKIU,IALJ,CAAF,CAANM,GAKqB,KALrBA;MAMD;MACDA,MAAM,CAACC,SAAPD,GAAmB;QACjBnB,GAAG,EAAE,kBADY;QAEjBC,MAAM,EAAE,kBAFS;QAGjBC,IAAI,EAAE,kBAHW;QAIjBC,KAAK,EAAE,kBAJU;QAKjBJ,MAAM,EAAE;MALS,EAMjBc,IANiB,CAAnBM;IAOD;;IAED,OAAOA,MAAP;EA5C6B,EAA/B;EA+CA,OAAO;IAAEP;EAAF,CAAP;AACD","names":["useRtl","computed","parseAnchor","propsFactory","oppositeMap","center","top","bottom","left","right","makeLocationProps","location","String","useLocation","props","opposite","offset","isRtl","locationStyles","side","align","split","length","value","getOffset","styles","transform"],"sources":["../../src/composables/location.ts"],"sourcesContent":["// Composables\nimport { useRtl } from '@/composables/rtl'\n\n// Utilities\nimport { computed } from 'vue'\nimport { parseAnchor, propsFactory } from '@/util'\n\n// Types\nimport type { CSSProperties, PropType } from 'vue'\nimport type { Anchor } from '@/util'\n\nconst oppositeMap = {\n  center: 'center',\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left',\n} as const\n\nexport interface LocationProps {\n  location: Anchor | undefined\n}\n\nexport const makeLocationProps = propsFactory({\n  location: String as PropType<Anchor>,\n}, 'location')\n\nexport function useLocation (props: LocationProps, opposite = false, offset?: (side: string) => number) {\n  const { isRtl } = useRtl()\n\n  const locationStyles = computed(() => {\n    if (!props.location) return {}\n\n    const { side, align } = parseAnchor(\n      props.location.split(' ').length > 1\n        ? props.location\n        : `${props.location} center` as Anchor,\n      isRtl.value\n    )\n\n    function getOffset (side: string) {\n      return offset\n        ? offset(side)\n        : 0\n    }\n\n    const styles = {} as CSSProperties\n\n    if (side !== 'center') {\n      if (opposite) styles[oppositeMap[side]] = `calc(100% - ${getOffset(side)}px)`\n      else styles[side] = 0\n    }\n    if (align !== 'center') {\n      if (opposite) styles[oppositeMap[align]] = `calc(100% - ${getOffset(align)}px)`\n      else styles[align] = 0\n    } else {\n      if (side === 'center') styles.top = styles.left = '50%'\n      else {\n        styles[({\n          top: 'left',\n          bottom: 'left',\n          left: 'top',\n          right: 'top',\n        } as const)[side]] = '50%'\n      }\n      styles.transform = {\n        top: 'translateX(-50%)',\n        bottom: 'translateX(-50%)',\n        left: 'translateY(-50%)',\n        right: 'translateY(-50%)',\n        center: 'translate(-50%, -50%)',\n      }[side]\n    }\n\n    return styles\n  })\n\n  return { locationStyles }\n}\n"]},"metadata":{},"sourceType":"module"}