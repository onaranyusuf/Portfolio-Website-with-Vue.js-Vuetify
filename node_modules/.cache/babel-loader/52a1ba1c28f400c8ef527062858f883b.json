{"ast":null,"code":"import { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VList.css\"; // Components\n\nimport { VListChildren } from \"./VListChildren.mjs\"; // Composables\n\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeItemsProps } from \"../../composables/items.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeNestedProps, useNested } from \"../../composables/nested/nested.mjs\";\nimport { makeVariantProps } from \"../../composables/variant.mjs\";\nimport { createList } from \"./list.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, getPropertyFromItem, pick, useRender } from \"../../util/index.mjs\"; // Types\n\nfunction transformItem(props, item) {\n  const type = getPropertyFromItem(item, props.itemType, 'item');\n  const title = typeof item === 'string' ? item : getPropertyFromItem(item, props.itemTitle);\n  const value = getPropertyFromItem(item, props.itemValue, undefined);\n  const children = getPropertyFromItem(item, props.itemChildren);\n  const itemProps = props.itemProps === true ? pick(item, ['children'])[1] : getPropertyFromItem(item, props.itemProps);\n  const _props = {\n    title,\n    value,\n    ...itemProps\n  };\n  return {\n    type,\n    title: _props.title,\n    value: _props.value,\n    props: _props,\n    children: type === 'item' && children ? transformItems(props, children) : undefined,\n    raw: item\n  };\n}\n\nfunction transformItems(props, items) {\n  const array = [];\n\n  for (const item of items) {\n    array.push(transformItem(props, item));\n  }\n\n  return array;\n}\n\nfunction useListItems(props) {\n  const items = computed(() => transformItems(props, props.items));\n  return {\n    items\n  };\n}\n\nexport const VList = genericComponent()({\n  name: 'VList',\n  props: {\n    activeColor: String,\n    activeClass: String,\n    bgColor: String,\n    disabled: Boolean,\n    lines: {\n      type: [Boolean, String],\n      default: 'one'\n    },\n    nav: Boolean,\n    ...makeNestedProps({\n      selectStrategy: 'single-leaf',\n      openStrategy: 'list'\n    }),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    itemType: {\n      type: String,\n      default: 'type'\n    },\n    ...makeItemsProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({\n      variant: 'text'\n    })\n  },\n  emits: {\n    'update:selected': val => true,\n    'update:opened': val => true,\n    'click:open': value => true,\n    'click:select': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      items\n    } = useListItems(props);\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      open,\n      select\n    } = useNested(props);\n    const lineClasses = computed(() => props.lines ? `v-list--${props.lines}-line` : undefined);\n    const activeColor = toRef(props, 'activeColor');\n    const color = toRef(props, 'color');\n    createList();\n    provideDefaults({\n      VListGroup: {\n        activeColor,\n        color\n      },\n      VListItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor,\n        color,\n        density: toRef(props, 'density'),\n        disabled: toRef(props, 'disabled'),\n        lines: toRef(props, 'lines'),\n        nav: toRef(props, 'nav'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    useRender(() => {\n      return _createVNode(props.tag, {\n        \"class\": ['v-list', {\n          'v-list--disabled': props.disabled,\n          'v-list--nav': props.nav\n        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, densityClasses.value, elevationClasses.value, lineClasses.value, roundedClasses.value],\n        \"style\": [backgroundColorStyles.value, dimensionStyles.value]\n      }, {\n        default: () => [_createVNode(VListChildren, {\n          \"items\": items.value\n        }, slots)]\n      });\n    });\n    return {\n      open,\n      select\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VListChildren","makeBorderProps","useBorder","makeDensityProps","useDensity","makeDimensionProps","useDimension","makeElevationProps","useElevation","makeItemsProps","makeRoundedProps","useRounded","makeTagProps","useBackgroundColor","makeThemeProps","provideTheme","makeNestedProps","useNested","makeVariantProps","createList","provideDefaults","computed","toRef","genericComponent","getPropertyFromItem","pick","useRender","transformItem","props","item","type","itemType","title","itemTitle","value","itemValue","undefined","children","itemChildren","itemProps","_props","transformItems","raw","items","array","push","useListItems","VList","name","activeColor","String","activeClass","bgColor","disabled","Boolean","lines","default","nav","selectStrategy","openStrategy","variant","emits","val","setup","slots","_ref","themeClasses","backgroundColorClasses","backgroundColorStyles","borderClasses","densityClasses","dimensionStyles","elevationClasses","roundedClasses","open","select","lineClasses","color","VListGroup","VListItem","density"],"sources":["../../../src/components/VList/VList.tsx"],"sourcesContent":["// Styles\nimport './VList.sass'\n\n// Components\nimport { VListChildren } from './VListChildren'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeItemsProps } from '@/composables/items'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeNestedProps, useNested } from '@/composables/nested/nested'\nimport { makeVariantProps } from '@/composables/variant'\nimport { createList } from './list'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, getPropertyFromItem, pick, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { ListGroupActivatorSlot } from './VListGroup'\nimport type { InternalItem, ItemProps } from '@/composables/items'\n\nexport interface InternalListItem extends InternalItem {\n  type?: 'item' | 'subheader' | 'divider'\n}\n\nfunction transformItem (props: ItemProps & { itemType: string }, item: any): InternalListItem {\n  const type = getPropertyFromItem(item, props.itemType, 'item')\n  const title = typeof item === 'string' ? item : getPropertyFromItem(item, props.itemTitle)\n  const value = getPropertyFromItem(item, props.itemValue, undefined)\n  const children = getPropertyFromItem(item, props.itemChildren)\n  const itemProps = props.itemProps === true ? pick(item, ['children'])[1] : getPropertyFromItem(item, props.itemProps)\n\n  const _props = {\n    title,\n    value,\n    ...itemProps,\n  }\n\n  return {\n    type,\n    title: _props.title,\n    value: _props.value,\n    props: _props,\n    children: type === 'item' && children ? transformItems(props, children) : undefined,\n    raw: item,\n  }\n}\n\nfunction transformItems (props: ItemProps & { itemType: string }, items: (string | object)[]) {\n  const array: InternalListItem[] = []\n\n  for (const item of items) {\n    array.push(transformItem(props, item))\n  }\n\n  return array\n}\n\nfunction useListItems (props: ItemProps & { itemType: string }) {\n  const items = computed(() => transformItems(props, props.items))\n\n  return { items }\n}\n\nexport const VList = genericComponent<new <T>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    subheader: []\n    header: [ListGroupActivatorSlot]\n    item: [T]\n  }>\n}>()({\n  name: 'VList',\n\n  props: {\n    activeColor: String,\n    activeClass: String,\n    bgColor: String,\n    disabled: Boolean,\n    lines: {\n      type: [Boolean, String] as PropType<'one' | 'two' | 'three' | false>,\n      default: 'one',\n    },\n    nav: Boolean,\n\n    ...makeNestedProps({\n      selectStrategy: 'single-leaf' as const,\n      openStrategy: 'list' as const,\n    }),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    itemType: {\n      type: String,\n      default: 'type',\n    },\n    ...makeItemsProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'text' } as const),\n  },\n\n  emits: {\n    'update:selected': (val: string[]) => true,\n    'update:opened': (val: string[]) => true,\n    'click:open': (value: { id: string, value: boolean, path: string[] }) => true,\n    'click:select': (value: { id: string, value: boolean, path: string[] }) => true,\n  },\n\n  setup (props, { slots }) {\n    const { items } = useListItems(props)\n    const { themeClasses } = provideTheme(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { borderClasses } = useBorder(props)\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { open, select } = useNested(props)\n    const lineClasses = computed(() => props.lines ? `v-list--${props.lines}-line` : undefined)\n    const activeColor = toRef(props, 'activeColor')\n    const color = toRef(props, 'color')\n\n    createList()\n\n    provideDefaults({\n      VListGroup: {\n        activeColor,\n        color,\n      },\n      VListItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor,\n        color,\n        density: toRef(props, 'density'),\n        disabled: toRef(props, 'disabled'),\n        lines: toRef(props, 'lines'),\n        nav: toRef(props, 'nav'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => {\n      return (\n        <props.tag\n          class={[\n            'v-list',\n            {\n              'v-list--disabled': props.disabled,\n              'v-list--nav': props.nav,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            borderClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            lineClasses.value,\n            roundedClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            dimensionStyles.value,\n          ]}\n        >\n          <VListChildren items={ items.value } v-slots={ slots }></VListChildren>\n        </props.tag>\n      )\n    })\n\n    return {\n      open,\n      select,\n    }\n  },\n})\n\nexport type VList = InstanceType<typeof VList>\n"]},"metadata":{},"sourceType":"module"}