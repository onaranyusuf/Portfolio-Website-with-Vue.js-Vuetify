{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\"; // Components\n\nimport { makeSelectionControlProps, VSelectionControl } from \"../VSelectionControl/VSelectionControl.mjs\"; // Composables\n\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { defineComponent, pick, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate'\n  },\n  ...makeSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn'\n  })\n});\nexport const VCheckboxBtn = defineComponent({\n  name: 'VCheckboxBtn',\n  props: makeVCheckboxBtnProps(),\n  emits: {\n    'update:modelValue': value => true,\n    'update:indeterminate': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      emit\n    } = _ref;\n    const indeterminate = useProxiedModel(props, 'indeterminate');\n\n    function onChange(v) {\n      if (indeterminate.value) {\n        indeterminate.value = false;\n      }\n\n      emit('update:modelValue', v);\n    }\n\n    const falseIcon = computed(() => {\n      return props.indeterminate ? props.indeterminateIcon : props.falseIcon;\n    });\n    const trueIcon = computed(() => {\n      return props.indeterminate ? props.indeterminateIcon : props.trueIcon;\n    });\n    useRender(() => _createVNode(VSelectionControl, _mergeProps(props, {\n      \"class\": \"v-checkbox-btn\",\n      \"type\": \"checkbox\",\n      \"inline\": true,\n      \"onUpdate:modelValue\": onChange,\n      \"falseIcon\": falseIcon.value,\n      \"trueIcon\": trueIcon.value,\n      \"aria-checked\": props.indeterminate ? 'mixed' : undefined\n    }), slots));\n    return {};\n  }\n\n});\nexport function filterCheckboxBtnProps(props) {\n  return pick(props, Object.keys(VCheckboxBtn.props));\n}","map":{"version":3,"mappings":"qHAAA;;SACSA,2BAA2BC,yB,8CAEpC;;SACSC,uB;SACAC,iB,+BAET;;AACA,SAASC,QAAT,QAAyB,KAAzB;SACSC,iBAAiBC,MAAMC,cAAcC,iB,wBAE9C;;AAGA,OAAO,MAAMC,qBAAqB,GAAGF,YAAY,CAAC;EAChDG,aAAa,EAAEC,OADiC;EAEhDC,iBAAiB,EAAE;IACjBC,IAAI,EAAEV,SADW;IAEjBW,OAAO,EAAE;EAFQ,CAF6B;EAOhD,GAAGd,yBAAyB,CAAC;IAC3Be,SAAS,EAAE,cADgB;IAE3BC,QAAQ,EAAE;EAFiB,CAAD;AAPoB,CAAD,CAA1C;AAaP,OAAO,MAAMC,YAAY,GAAGZ,eAAe,CAAC;EAC1Ca,IAAI,EAAE,cADoC;EAG1CC,KAAK,EAAEV,qBAAqB,EAHc;EAK1CW,KAAK,EAAE;IACL,qBAAsBC,KAAD,IAAgB,IADhC;IAEL,wBAAyBC,GAAD,IAAkB;EAFrC,CALmC;;EAU1CC,KAAK,CAAEJ,KAAF,QAA0B;IAAA,IAAjB;MAAEK,KAAF;MAASC;IAAT,IAAiBC;IAC7B,MAAMhB,aAAa,GAAGR,eAAe,CAACiB,KAAD,EAAQ,eAAR,CAArC;;IAEA,SAASQ,QAAT,CAAmBC,CAAnB,EAA2B;MACzB,IAAIlB,aAAa,CAACW,KAAlB,EAAyB;QACvBX,aAAa,CAACW,KAAdX,GAAsB,KAAtBA;MACD;;MAEDe,IAAI,CAAC,mBAAD,EAAsBG,CAAtB,CAAJH;IACD;;IAED,MAAMV,SAAS,GAAGX,QAAQ,CAAC,MAAM;MAC/B,OAAOe,KAAK,CAACT,aAANS,GACHA,KAAK,CAACP,iBADHO,GAEHA,KAAK,CAACJ,SAFV;IADwB,EAA1B;IAMA,MAAMC,QAAQ,GAAGZ,QAAQ,CAAC,MAAM;MAC9B,OAAOe,KAAK,CAACT,aAANS,GACHA,KAAK,CAACP,iBADHO,GAEHA,KAAK,CAACH,QAFV;IADuB,EAAzB;IAMAR,SAAS,CAAC,kDAEDW,KAFC;MAAA,SAGA,gBAHA;MAAA,QAID,UAJC;MAAA;MAAA,uBAMgBQ,QANhB;MAAA,aAOMZ,SAAS,CAACM,KAPhB;MAAA,YAQKL,QAAQ,CAACK,KARd;MAAA,gBASSF,KAAK,CAACT,aAANS,GAAsB,OAAtBA,GAAgCU;IATzC,IAUIL,KAVJ,CAAD,CAAThB;IAcA,OAAO,EAAP;EACD;;AAhDyC,CAAD,CAApC;AAqDP,OAAO,SAASsB,sBAAT,CAAiCX,KAAjC,EAAoG;EACzG,OAAOb,IAAI,CAACa,KAAD,EAAQY,MAAM,CAACC,IAAPD,CAAYd,YAAY,CAACE,KAAzBY,CAAR,CAAX;AACD","names":["makeSelectionControlProps","VSelectionControl","useProxiedModel","IconValue","computed","defineComponent","pick","propsFactory","useRender","makeVCheckboxBtnProps","indeterminate","Boolean","indeterminateIcon","type","default","falseIcon","trueIcon","VCheckboxBtn","name","props","emits","value","val","setup","slots","emit","_ref","onChange","v","undefined","filterCheckboxBtnProps","Object","keys"],"sources":["../../../src/components/VCheckbox/VCheckboxBtn.tsx"],"sourcesContent":["// Components\nimport { makeSelectionControlProps, VSelectionControl } from '../VSelectionControl/VSelectionControl'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { computed } from 'vue'\nimport { defineComponent, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ExtractPropTypes } from 'vue'\n\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate',\n  },\n\n  ...makeSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn',\n  }),\n})\n\nexport const VCheckboxBtn = defineComponent({\n  name: 'VCheckboxBtn',\n\n  props: makeVCheckboxBtnProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n\n    function onChange (v: any) {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n\n      emit('update:modelValue', v)\n    }\n\n    const falseIcon = computed(() => {\n      return props.indeterminate\n        ? props.indeterminateIcon\n        : props.falseIcon\n    })\n\n    const trueIcon = computed(() => {\n      return props.indeterminate\n        ? props.indeterminateIcon\n        : props.trueIcon\n    })\n\n    useRender(() => (\n      <VSelectionControl\n        { ...props }\n        class=\"v-checkbox-btn\"\n        type=\"checkbox\"\n        inline\n        onUpdate:modelValue={ onChange }\n        falseIcon={ falseIcon.value }\n        trueIcon={ trueIcon.value }\n        aria-checked={ props.indeterminate ? 'mixed' : undefined }\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VCheckboxBtn = InstanceType<typeof VCheckboxBtn>\n\nexport function filterCheckboxBtnProps (props: ExtractPropTypes<ReturnType<typeof makeVCheckboxBtnProps>>) {\n  return pick(props, Object.keys(VCheckboxBtn.props) as any)\n}\n"]},"metadata":{},"sourceType":"module"}