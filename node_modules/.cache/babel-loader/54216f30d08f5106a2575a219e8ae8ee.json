{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VMessages.css\"; // Components\n\nimport { VSlideYTransition } from \"../transitions/index.mjs\"; // Composables\n\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { defineComponent, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport const VMessages = defineComponent({\n  name: 'VMessages',\n  props: {\n    active: Boolean,\n    color: String,\n    messages: {\n      type: [Array, String],\n      default: () => []\n    },\n    ...makeTransitionProps({\n      transition: {\n        component: VSlideYTransition,\n        leaveAbsolute: true,\n        group: true\n      }\n    })\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const messages = computed(() => wrapInArray(props.messages));\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(computed(() => props.color));\n    useRender(() => _createVNode(MaybeTransition, {\n      \"transition\": props.transition,\n      \"tag\": \"div\",\n      \"class\": ['v-messages', textColorClasses.value],\n      \"style\": textColorStyles.value\n    }, {\n      default: () => [props.active && messages.value.map((message, i) => _createVNode(\"div\", {\n        \"class\": \"v-messages__message\",\n        \"key\": `${i}-${messages.value}`\n      }, [slots.message ? slots.message({\n        message\n      }) : message]))]\n    }));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,yB,CAEA;;SACSA,yB,4BAET;;SACSC,qBAAqBC,uB;SACrBC,oB,+BAET;;AACA,SAASC,QAAT,QAAyB,KAAzB;SACSC,iBAAiBC,WAAWC,mB,wBAErC;;AAGA,OAAO,MAAMC,SAAS,GAAGH,eAAe,CAAC;EACvCI,IAAI,EAAE,WADiC;EAGvCC,KAAK,EAAE;IACLC,MAAM,EAAEC,OADH;IAELC,KAAK,EAAEC,MAFF;IAGLC,QAAQ,EAAE;MACRC,IAAI,EAAE,CAACC,KAAD,EAAQH,MAAR,CADE;MAERI,OAAO,EAAE,MAAO;IAFR,CAHL;IAQL,GAAGjB,mBAAmB,CAAC;MACrBkB,UAAU,EAAE;QACVC,SAAS,EAAEpB,iBADD;QAEVqB,aAAa,EAAE,IAFL;QAGVC,KAAK,EAAE;MAHG;IADS,CAAD;EARjB,CAHgC;;EAoBvCC,KAAK,CAAEb,KAAF,QAAoB;IAAA,IAAX;MAAEc;IAAF,IAAWC;IACvB,MAAMV,QAAQ,GAAGX,QAAQ,CAAC,MAAMG,WAAW,CAACG,KAAK,CAACK,QAAP,CAAlB,CAAzB;IACA,MAAM;MAAEW,gBAAF;MAAoBC;IAApB,IAAwCxB,YAAY,CAACC,QAAQ,CAAC,MAAMM,KAAK,CAACG,KAAb,CAAT,CAA1D;IAEAP,SAAS,CAAC;MAAA,cAEOI,KAAK,CAACS,UAFb;MAAA,OAGF,KAHE;MAAA,SAIC,CACL,YADK,EAELO,gBAAgB,CAACE,KAFZ,CAJD;MAAA,SAQED,eAAe,CAACC;IARlB;MAAAV,gBAUJR,KAAK,CAACC,MAAND,IACAK,QAAQ,CAACa,KAATb,CAAec,GAAfd,CAAmB,CAACe,OAAD,EAAUC,CAAV;QAAA,SAET,qBAFS;QAAA,OAGR,GAAEA,CAAE,IAAGhB,QAAQ,CAACa,KAAM;MAHd,IAKbJ,KAAK,CAACM,OAANN,GAAgBA,KAAK,CAACM,OAANN,CAAc;QAAEM;MAAF,CAAdN,CAAhBA,GAA6CM,OALhC,EAAnBf,CAXI;IAAA,EAAD,CAATT;IAuBA,OAAO,EAAP;EACD;;AAhDsC,CAAD,CAAjC","names":["VSlideYTransition","makeTransitionProps","MaybeTransition","useTextColor","computed","defineComponent","useRender","wrapInArray","VMessages","name","props","active","Boolean","color","String","messages","type","Array","default","transition","component","leaveAbsolute","group","setup","slots","_ref","textColorClasses","textColorStyles","value","map","message","i"],"sources":["../../../src/components/VMessages/VMessages.tsx"],"sourcesContent":["// Styles\nimport './VMessages.sass'\n\n// Components\nimport { VSlideYTransition } from '@/components/transitions'\n\n// Composables\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed } from 'vue'\nimport { defineComponent, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VMessages = defineComponent({\n  name: 'VMessages',\n\n  props: {\n    active: Boolean,\n    color: String,\n    messages: {\n      type: [Array, String] as PropType<string | string[]>,\n      default: () => ([]),\n    },\n\n    ...makeTransitionProps({\n      transition: {\n        component: VSlideYTransition,\n        leaveAbsolute: true,\n        group: true,\n      },\n    }),\n  },\n\n  setup (props, { slots }) {\n    const messages = computed(() => wrapInArray(props.messages))\n    const { textColorClasses, textColorStyles } = useTextColor(computed(() => props.color))\n\n    useRender(() => (\n      <MaybeTransition\n        transition={ props.transition }\n        tag=\"div\"\n        class={[\n          'v-messages',\n          textColorClasses.value,\n        ]}\n        style={ textColorStyles.value }\n      >\n        { props.active && (\n          messages.value.map((message, i) => (\n            <div\n              class=\"v-messages__message\"\n              key={ `${i}-${messages.value}` }\n            >\n              { slots.message ? slots.message({ message }) : message }\n            </div>\n          ))\n        ) }\n      </MaybeTransition>\n    ))\n\n    return {}\n  },\n})\n"]},"metadata":{},"sourceType":"module"}