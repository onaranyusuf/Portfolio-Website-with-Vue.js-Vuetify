{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VNavigationDrawer.css\"; // Composables\n\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeLayoutItemProps, useLayoutItem } from \"../../composables/layout.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { useDisplay } from \"../../composables/display.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useRouter } from \"../../composables/router.mjs\";\nimport { useSsrBoot } from \"../../composables/ssrBoot.mjs\";\nimport { useTouch } from \"./touch.mjs\"; // Utilities\n\nimport { computed, onBeforeMount, ref, toRef, Transition, watch } from 'vue';\nimport { convertToUnit, defineComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VNavigationDrawer = defineComponent({\n  name: 'VNavigationDrawer',\n  props: {\n    color: String,\n    disableResizeWatcher: Boolean,\n    disableRouteWatcher: Boolean,\n    expandOnHover: Boolean,\n    floating: Boolean,\n    modelValue: {\n      type: Boolean,\n      default: null\n    },\n    permanent: Boolean,\n    rail: Boolean,\n    railWidth: {\n      type: [Number, String],\n      default: 72\n    },\n    image: String,\n    temporary: Boolean,\n    touchless: Boolean,\n    width: {\n      type: [Number, String],\n      default: 256\n    },\n    location: {\n      type: String,\n      default: 'left',\n      validator: value => ['left', 'right', 'bottom'].includes(value)\n    },\n    ...makeBorderProps(),\n    ...makeElevationProps(),\n    ...makeLayoutItemProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps({\n      tag: 'nav'\n    }),\n    ...makeThemeProps()\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'color'));\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      mobile\n    } = useDisplay();\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const router = useRouter();\n    const isActive = useProxiedModel(props, 'modelValue', null, v => !!v);\n    const isHovering = ref(false);\n    const {\n      ssrBootStyles\n    } = useSsrBoot();\n    const width = computed(() => {\n      return props.rail && props.expandOnHover && isHovering.value ? Number(props.width) : Number(props.rail ? props.railWidth : props.width);\n    });\n    const isTemporary = computed(() => !props.permanent && (mobile.value || props.temporary));\n\n    if (!props.disableResizeWatcher) {\n      watch(isTemporary, val => !props.permanent && (isActive.value = !val));\n    }\n\n    if (!props.disableRouteWatcher && router) {\n      watch(router.currentRoute, () => isTemporary.value && (isActive.value = false));\n    }\n\n    watch(() => props.permanent, val => {\n      if (val) isActive.value = true;\n    });\n    onBeforeMount(() => {\n      if (props.modelValue != null || isTemporary.value) return;\n      isActive.value = props.permanent || !mobile.value;\n    });\n    const rootEl = ref();\n    const {\n      isDragging,\n      dragProgress,\n      dragStyles\n    } = useTouch({\n      isActive,\n      isTemporary,\n      width,\n      touchless: toRef(props, 'touchless'),\n      position: toRef(props, 'location')\n    });\n    const layoutSize = computed(() => {\n      const size = isTemporary.value ? 0 : props.rail && props.expandOnHover ? Number(props.railWidth) : width.value;\n      return isDragging.value ? size * dragProgress.value : size;\n    });\n    const {\n      layoutItemStyles,\n      layoutRect,\n      layoutItemScrimStyles\n    } = useLayoutItem({\n      id: props.name,\n      order: computed(() => parseInt(props.order, 10)),\n      position: toRef(props, 'location'),\n      layoutSize,\n      elementSize: width,\n      active: computed(() => isActive.value || isDragging.value),\n      disableTransitions: computed(() => isDragging.value),\n      absolute: toRef(props, 'absolute')\n    });\n    const scrimStyles = computed(() => ({ ...(isDragging.value ? {\n        opacity: dragProgress.value * 0.2,\n        transition: 'none'\n      } : undefined),\n      ...(layoutRect.value ? {\n        left: convertToUnit(layoutRect.value.left),\n        right: convertToUnit(layoutRect.value.right),\n        top: convertToUnit(layoutRect.value.top),\n        bottom: convertToUnit(layoutRect.value.bottom)\n      } : undefined),\n      ...layoutItemScrimStyles.value\n    }));\n    useRender(() => {\n      var _slots$image, _slots$prepend, _slots$default, _slots$append;\n\n      const hasImage = slots.image || props.image;\n      return _createVNode(_Fragment, null, [_createVNode(props.tag, _mergeProps({\n        \"ref\": rootEl,\n        \"onMouseenter\": () => isHovering.value = true,\n        \"onMouseleave\": () => isHovering.value = false,\n        \"class\": ['v-navigation-drawer', {\n          'v-navigation-drawer--bottom': props.location === 'bottom',\n          'v-navigation-drawer--end': props.location === 'right',\n          'v-navigation-drawer--expand-on-hover': props.expandOnHover,\n          'v-navigation-drawer--floating': props.floating,\n          'v-navigation-drawer--is-hovering': isHovering.value,\n          'v-navigation-drawer--rail': props.rail,\n          'v-navigation-drawer--start': props.location === 'left',\n          'v-navigation-drawer--temporary': isTemporary.value,\n          'v-navigation-drawer--active': isActive.value\n        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, elevationClasses.value, roundedClasses.value],\n        \"style\": [backgroundColorStyles.value, layoutItemStyles.value, dragStyles.value, ssrBootStyles.value]\n      }, attrs), {\n        default: () => [hasImage && _createVNode(\"div\", {\n          \"key\": \"image\",\n          \"class\": \"v-navigation-drawer__img\"\n        }, [slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots, {\n          image: props.image\n        }) : _createVNode(\"img\", {\n          \"src\": props.image,\n          \"alt\": \"\"\n        }, null)]), slots.prepend && _createVNode(\"div\", {\n          \"class\": \"v-navigation-drawer__prepend\"\n        }, [(_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots)]), _createVNode(\"div\", {\n          \"class\": \"v-navigation-drawer__content\"\n        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), slots.append && _createVNode(\"div\", {\n          \"class\": \"v-navigation-drawer__append\"\n        }, [(_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots)])]\n      }), _createVNode(Transition, {\n        \"name\": \"fade-transition\"\n      }, {\n        default: () => [isTemporary.value && (isDragging.value || isActive.value) && _createVNode(\"div\", {\n          \"class\": \"v-navigation-drawer__scrim\",\n          \"style\": scrimStyles.value,\n          \"onClick\": () => isActive.value = false\n        }, null)]\n      })]);\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeBorderProps","useBorder","makeElevationProps","useElevation","makeLayoutItemProps","useLayoutItem","makeRoundedProps","useRounded","makeTagProps","makeThemeProps","provideTheme","useBackgroundColor","useDisplay","useProxiedModel","useRouter","useSsrBoot","useTouch","computed","onBeforeMount","ref","toRef","Transition","watch","convertToUnit","defineComponent","useRender","VNavigationDrawer","name","props","color","String","disableResizeWatcher","Boolean","disableRouteWatcher","expandOnHover","floating","modelValue","type","default","permanent","rail","railWidth","Number","image","temporary","touchless","width","location","validator","value","includes","tag","emits","val","setup","attrs","slots","_ref","themeClasses","borderClasses","backgroundColorClasses","backgroundColorStyles","elevationClasses","mobile","roundedClasses","router","isActive","v","isHovering","ssrBootStyles","isTemporary","currentRoute","rootEl","isDragging","dragProgress","dragStyles","position","layoutSize","size","layoutItemStyles","layoutRect","layoutItemScrimStyles","id","order","parseInt","elementSize","active","disableTransitions","absolute","scrimStyles","opacity","transition","undefined","left","right","top","bottom","hasImage","_slots$image","prepend","_slots$prepend","_slots$default","append","_slots$append"],"sources":["../../../src/components/VNavigationDrawer/VNavigationDrawer.tsx"],"sourcesContent":["// Styles\nimport './VNavigationDrawer.sass'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeLayoutItemProps, useLayoutItem } from '@/composables/layout'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useBackgroundColor } from '@/composables/color'\nimport { useDisplay } from '@/composables/display'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useRouter } from '@/composables/router'\nimport { useSsrBoot } from '@/composables/ssrBoot'\nimport { useTouch } from './touch'\n\n// Utilities\nimport { computed, onBeforeMount, ref, toRef, Transition, watch } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VNavigationDrawer = defineComponent({\n  name: 'VNavigationDrawer',\n\n  props: {\n    color: String,\n    disableResizeWatcher: Boolean,\n    disableRouteWatcher: Boolean,\n    expandOnHover: Boolean,\n    floating: Boolean,\n    modelValue: {\n      type: Boolean as PropType<boolean | null>,\n      default: null,\n    },\n    permanent: Boolean,\n    rail: Boolean,\n    railWidth: {\n      type: [Number, String],\n      default: 72,\n    },\n    image: String,\n    temporary: Boolean,\n    touchless: Boolean,\n    width: {\n      type: [Number, String],\n      default: 256,\n    },\n    location: {\n      type: String as PropType<'left' | 'right' | 'bottom'>,\n      default: 'left',\n      validator: (value: any) => ['left', 'right', 'bottom'].includes(value),\n    },\n\n    ...makeBorderProps(),\n    ...makeElevationProps(),\n    ...makeLayoutItemProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps({ tag: 'nav' }),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { borderClasses } = useBorder(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { elevationClasses } = useElevation(props)\n    const { mobile } = useDisplay()\n    const { roundedClasses } = useRounded(props)\n    const router = useRouter()\n    const isActive = useProxiedModel(props, 'modelValue', null, v => !!v)\n    const isHovering = ref(false)\n    const { ssrBootStyles } = useSsrBoot()\n    const width = computed(() => {\n      return (props.rail && props.expandOnHover && isHovering.value)\n        ? Number(props.width)\n        : Number(props.rail ? props.railWidth : props.width)\n    })\n    const isTemporary = computed(() => !props.permanent && (mobile.value || props.temporary))\n\n    if (!props.disableResizeWatcher) {\n      watch(isTemporary, val => !props.permanent && (isActive.value = !val))\n    }\n\n    if (!props.disableRouteWatcher && router) {\n      watch(router.currentRoute, () => isTemporary.value && (isActive.value = false))\n    }\n\n    watch(() => props.permanent, val => {\n      if (val) isActive.value = true\n    })\n\n    onBeforeMount(() => {\n      if (props.modelValue != null || isTemporary.value) return\n\n      isActive.value = props.permanent || !mobile.value\n    })\n\n    const rootEl = ref<HTMLElement>()\n\n    const { isDragging, dragProgress, dragStyles } = useTouch({\n      isActive,\n      isTemporary,\n      width,\n      touchless: toRef(props, 'touchless'),\n      position: toRef(props, 'location'),\n    })\n\n    const layoutSize = computed(() => {\n      const size = isTemporary.value ? 0\n        : props.rail && props.expandOnHover ? Number(props.railWidth)\n        : width.value\n\n      return isDragging.value ? size * dragProgress.value : size\n    })\n    const { layoutItemStyles, layoutRect, layoutItemScrimStyles } = useLayoutItem({\n      id: props.name,\n      order: computed(() => parseInt(props.order, 10)),\n      position: toRef(props, 'location'),\n      layoutSize,\n      elementSize: width,\n      active: computed(() => isActive.value || isDragging.value),\n      disableTransitions: computed(() => isDragging.value),\n      absolute: toRef(props, 'absolute'),\n    })\n\n    const scrimStyles = computed(() => ({\n      ...isDragging.value ? {\n        opacity: dragProgress.value * 0.2,\n        transition: 'none',\n      } : undefined,\n      ...layoutRect.value ? {\n        left: convertToUnit(layoutRect.value.left),\n        right: convertToUnit(layoutRect.value.right),\n        top: convertToUnit(layoutRect.value.top),\n        bottom: convertToUnit(layoutRect.value.bottom),\n      } : undefined,\n      ...layoutItemScrimStyles.value,\n    }))\n\n    useRender(() => {\n      const hasImage = (slots.image || props.image)\n\n      return (\n        <>\n          <props.tag\n            ref={ rootEl }\n            onMouseenter={ () => (isHovering.value = true) }\n            onMouseleave={ () => (isHovering.value = false) }\n            class={[\n              'v-navigation-drawer',\n              {\n                'v-navigation-drawer--bottom': props.location === 'bottom',\n                'v-navigation-drawer--end': props.location === 'right',\n                'v-navigation-drawer--expand-on-hover': props.expandOnHover,\n                'v-navigation-drawer--floating': props.floating,\n                'v-navigation-drawer--is-hovering': isHovering.value,\n                'v-navigation-drawer--rail': props.rail,\n                'v-navigation-drawer--start': props.location === 'left',\n                'v-navigation-drawer--temporary': isTemporary.value,\n                'v-navigation-drawer--active': isActive.value,\n              },\n              themeClasses.value,\n              backgroundColorClasses.value,\n              borderClasses.value,\n              elevationClasses.value,\n              roundedClasses.value,\n            ]}\n            style={[\n              backgroundColorStyles.value,\n              layoutItemStyles.value,\n              dragStyles.value,\n              ssrBootStyles.value,\n            ]}\n            { ...attrs }\n          >\n            { hasImage && (\n              <div key=\"image\" class=\"v-navigation-drawer__img\">\n                { slots.image\n                  ? slots.image?.({ image: props.image })\n                  : (<img src={ props.image } alt=\"\" />)\n                }\n              </div>\n            )}\n\n            { slots.prepend && (\n              <div class=\"v-navigation-drawer__prepend\">\n                { slots.prepend?.() }\n              </div>\n            )}\n\n            <div class=\"v-navigation-drawer__content\">\n              { slots.default?.() }\n            </div>\n\n            { slots.append && (\n              <div class=\"v-navigation-drawer__append\">\n                { slots.append?.() }\n              </div>\n            )}\n          </props.tag>\n\n          <Transition name=\"fade-transition\">\n            { isTemporary.value && (isDragging.value || isActive.value) && (\n              <div\n                class=\"v-navigation-drawer__scrim\"\n                style={ scrimStyles.value }\n                onClick={ () => isActive.value = false }\n              />\n            )}\n          </Transition>\n        </>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VNavigationDrawer = InstanceType<typeof VNavigationDrawer>\n"]},"metadata":{},"sourceType":"module"}