{"ast":null,"code":"// Composables\nimport { useForm } from \"./form.mjs\";\nimport { useProxiedModel } from \"./proxiedModel.mjs\"; // Utilities\n\nimport { computed, onBeforeMount, onBeforeUnmount, ref, unref, watch } from 'vue';\nimport { getCurrentInstanceName, getUid, propsFactory, wrapInArray } from \"../util/index.mjs\"; // Types\n\nexport const makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String],\n    default: () => []\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array,\n    default: () => []\n  },\n  modelValue: null,\n  validationValue: null\n});\nexport function useValidation(props) {\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getUid();\n  const model = useProxiedModel(props, 'modelValue');\n  const validationModel = computed(() => {\n    var _props$validationValu;\n\n    return (_props$validationValu = props.validationValue) != null ? _props$validationValu : model.value;\n  });\n  const form = useForm();\n  const internalErrorMessages = ref([]);\n  const isPristine = ref(true);\n  const isDirty = computed(() => !!(wrapInArray(model.value === '' ? null : model.value).length || wrapInArray(validationModel.value === '' ? null : validationModel.value).length));\n  const isDisabled = computed(() => !!(props.disabled || form != null && form.isDisabled.value));\n  const isReadonly = computed(() => !!(props.readonly || form != null && form.isReadonly.value));\n  const errorMessages = computed(() => {\n    return props.errorMessages.length ? wrapInArray(props.errorMessages) : internalErrorMessages.value;\n  });\n  const isValid = computed(() => {\n    if (!props.rules.length) return true;\n    if (props.error || errorMessages.value.length) return false;\n    return isPristine.value ? null : true;\n  });\n  const isValidating = ref(false);\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--dirty`]: isDirty.value,\n      [`${name}--disabled`]: isDisabled.value,\n      [`${name}--readonly`]: isReadonly.value\n    };\n  });\n  const uid = computed(() => {\n    var _props$name;\n\n    return (_props$name = props.name) != null ? _props$name : unref(id);\n  });\n  onBeforeMount(() => {\n    form == null ? void 0 : form.register(uid.value, validate, reset, resetValidation, isValid);\n  });\n  onBeforeUnmount(() => {\n    form == null ? void 0 : form.unregister(uid.value);\n  });\n  watch(validationModel, () => {\n    if (validationModel.value != null) validate();\n  });\n\n  function reset() {\n    resetValidation();\n    model.value = null;\n  }\n\n  function resetValidation() {\n    isPristine.value = true;\n    internalErrorMessages.value = [];\n  }\n\n  async function validate() {\n    const results = [];\n    isValidating.value = true;\n\n    for (const rule of props.rules) {\n      if (results.length >= (props.maxErrors || 1)) {\n        break;\n      }\n\n      const handler = typeof rule === 'function' ? rule : () => rule;\n      const result = await handler(validationModel.value);\n      if (result === true) continue;\n\n      if (typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`);\n        continue;\n      }\n\n      results.push(result);\n    }\n\n    internalErrorMessages.value = results;\n    isValidating.value = false;\n    isPristine.value = false;\n    return internalErrorMessages.value;\n  }\n\n  return {\n    errorMessages,\n    isDirty,\n    isDisabled,\n    isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses\n  };\n}","map":{"version":3,"mappings":"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","names":["useForm","useProxiedModel","computed","onBeforeMount","onBeforeUnmount","ref","unref","watch","getCurrentInstanceName","getUid","propsFactory","wrapInArray","makeValidationProps","disabled","Boolean","error","errorMessages","type","Array","String","default","maxErrors","Number","name","readonly","rules","modelValue","validationValue","useValidation","props","id","model","validationModel","value","form","internalErrorMessages","isPristine","isDirty","length","isDisabled","isReadonly","isValid","isValidating","validationClasses","uid","register","validate","reset","resetValidation","unregister","results","rule","handler","result","console","warn","push"],"sources":["../../src/composables/validation.ts"],"sourcesContent":["// Composables\nimport { useForm } from '@/composables/form'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, onBeforeMount, onBeforeUnmount, ref, unref, watch } from 'vue'\nimport type { MaybeRef } from '@/util'\nimport { getCurrentInstanceName, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type ValidationResult = string | true\nexport type ValidationRule =\n  | ValidationResult\n  | PromiseLike<ValidationResult>\n  | ((value: any) => ValidationResult)\n  | ((value: any) => PromiseLike<ValidationResult>)\n\nexport interface ValidationProps {\n  disabled: boolean\n  error: boolean\n  errorMessages: string | string[]\n  maxErrors: string | number\n  name: string | undefined\n  readonly: boolean\n  rules: ValidationRule[]\n  modelValue: any\n  'onUpdate:modelValue': ((val: any) => void) | undefined\n  validationValue: any\n}\n\nexport const makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String] as PropType<string | string[]>,\n    default: () => ([]),\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1,\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array as PropType<ValidationRule[]>,\n    default: () => ([]),\n  },\n  modelValue: null,\n  validationValue: null,\n})\n\nexport function useValidation (\n  props: ValidationProps,\n  name = getCurrentInstanceName(),\n  id: MaybeRef<string | number> = getUid(),\n) {\n  const model = useProxiedModel(props, 'modelValue')\n  const validationModel = computed(() => props.validationValue ?? model.value)\n  const form = useForm()\n  const internalErrorMessages = ref<string[]>([])\n  const isPristine = ref(true)\n  const isDirty = computed(() => !!(\n    wrapInArray(model.value === '' ? null : model.value).length ||\n    wrapInArray(validationModel.value === '' ? null : validationModel.value).length\n  ))\n  const isDisabled = computed(() => !!(props.disabled || form?.isDisabled.value))\n  const isReadonly = computed(() => !!(props.readonly || form?.isReadonly.value))\n  const errorMessages = computed(() => {\n    return props.errorMessages.length\n      ? wrapInArray(props.errorMessages)\n      : internalErrorMessages.value\n  })\n  const isValid = computed(() => {\n    if (!props.rules.length) return true\n    if (props.error || errorMessages.value.length) return false\n\n    return isPristine.value ? null : true\n  })\n  const isValidating = ref(false)\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--dirty`]: isDirty.value,\n      [`${name}--disabled`]: isDisabled.value,\n      [`${name}--readonly`]: isReadonly.value,\n    }\n  })\n\n  const uid = computed(() => props.name ?? unref(id))\n\n  onBeforeMount(() => {\n    form?.register(uid.value, validate, reset, resetValidation, isValid)\n  })\n\n  onBeforeUnmount(() => {\n    form?.unregister(uid.value)\n  })\n\n  watch(validationModel, () => {\n    if (validationModel.value != null) validate()\n  })\n\n  function reset () {\n    resetValidation()\n    model.value = null\n  }\n\n  function resetValidation () {\n    isPristine.value = true\n    internalErrorMessages.value = []\n  }\n\n  async function validate () {\n    const results = []\n\n    isValidating.value = true\n\n    for (const rule of props.rules) {\n      if (results.length >= (props.maxErrors || 1)) {\n        break\n      }\n\n      const handler = typeof rule === 'function' ? rule : () => rule\n      const result = await handler(validationModel.value)\n\n      if (result === true) continue\n\n      if (typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`)\n\n        continue\n      }\n\n      results.push(result)\n    }\n\n    internalErrorMessages.value = results\n    isValidating.value = false\n    isPristine.value = false\n\n    return internalErrorMessages.value\n  }\n\n  return {\n    errorMessages,\n    isDirty,\n    isDisabled,\n    isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}