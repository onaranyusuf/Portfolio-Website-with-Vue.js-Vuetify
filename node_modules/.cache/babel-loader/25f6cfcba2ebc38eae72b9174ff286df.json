{"ast":null,"code":"import { resolveDirective as _resolveDirective, withDirectives as _withDirectives, mergeProps as _mergeProps, vModelDynamic as _vModelDynamic, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSelectionControl.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\";\nimport { VSelectionControlGroupSymbol } from \"../VSelectionControlGroup/VSelectionControlGroup.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeThemeProps } from \"../../composables/theme.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, inject, ref } from 'vue';\nimport { deepEqual, filterInputAttrs, genericComponent, getUid, pick, propsFactory, SUPPORTS_FOCUS_VISIBLE, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport const makeSelectionControlProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  label: String,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: Boolean,\n    default: true\n  },\n  multiple: {\n    type: Boolean,\n    default: null\n  },\n  name: String,\n  readonly: Boolean,\n  trueValue: null,\n  falseValue: null,\n  modelValue: null,\n  type: String,\n  value: null,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  },\n  ...makeThemeProps(),\n  ...makeDensityProps()\n});\nexport function useSelectionControl(props) {\n  const group = inject(VSelectionControlGroupSymbol, undefined);\n  const {\n    densityClasses\n  } = useDensity(props);\n  const modelValue = useProxiedModel(props, 'modelValue');\n  const trueValue = computed(() => props.trueValue !== undefined ? props.trueValue : props.value !== undefined ? props.value : true);\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false);\n  const isMultiple = computed(() => (group == null ? void 0 : group.multiple.value) || !!props.multiple || props.multiple == null && Array.isArray(modelValue.value));\n  const model = computed({\n    get() {\n      const val = group ? group.modelValue.value : modelValue.value;\n      return isMultiple.value ? val.some(v => props.valueComparator(v, trueValue.value)) : props.valueComparator(val, trueValue.value);\n    },\n\n    set(val) {\n      if (props.readonly) return;\n      const currentValue = val ? trueValue.value : falseValue.value;\n      let newVal = currentValue;\n\n      if (isMultiple.value) {\n        newVal = val ? [...wrapInArray(modelValue.value), currentValue] : wrapInArray(modelValue.value).filter(item => !props.valueComparator(item, trueValue.value));\n      }\n\n      if (group) {\n        group.modelValue.value = newVal;\n      } else {\n        modelValue.value = newVal;\n      }\n    }\n\n  });\n  const {\n    textColorClasses,\n    textColorStyles\n  } = useTextColor(computed(() => {\n    return model.value && !props.error && !props.disabled ? props.color : undefined;\n  }));\n  const icon = computed(() => {\n    var _group$trueIcon$value, _group$falseIcon$valu;\n\n    return model.value ? (_group$trueIcon$value = group == null ? void 0 : group.trueIcon.value) != null ? _group$trueIcon$value : props.trueIcon : (_group$falseIcon$valu = group == null ? void 0 : group.falseIcon.value) != null ? _group$falseIcon$valu : props.falseIcon;\n  });\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    icon\n  };\n}\nexport const VSelectionControl = genericComponent()({\n  name: 'VSelectionControl',\n  directives: {\n    Ripple\n  },\n  inheritAttrs: false,\n  props: makeSelectionControlProps(),\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      densityClasses,\n      group,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      trueValue\n    } = useSelectionControl(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const isFocused = ref(false);\n    const isFocusVisible = ref(false);\n    const input = ref();\n\n    function onFocus(e) {\n      isFocused.value = true;\n\n      if (!SUPPORTS_FOCUS_VISIBLE || SUPPORTS_FOCUS_VISIBLE && e.target.matches(':focus-visible')) {\n        isFocusVisible.value = true;\n      }\n    }\n\n    function onBlur() {\n      isFocused.value = false;\n      isFocusVisible.value = false;\n    }\n\n    useRender(() => {\n      var _group$type$value, _slots$default, _group$name$value, _slots$input;\n\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      const type = (_group$type$value = group == null ? void 0 : group.type.value) != null ? _group$type$value : props.type;\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-selection-control', {\n          'v-selection-control--dirty': model.value,\n          'v-selection-control--disabled': props.disabled,\n          'v-selection-control--error': props.error,\n          'v-selection-control--focused': isFocused.value,\n          'v-selection-control--focus-visible': isFocusVisible.value,\n          'v-selection-control--inline': (group == null ? void 0 : group.inline.value) || props.inline\n        }, densityClasses.value]\n      }, rootAttrs), [_createVNode(\"div\", {\n        \"class\": ['v-selection-control__wrapper', textColorClasses.value],\n        \"style\": textColorStyles.value\n      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), _withDirectives(_createVNode(\"div\", {\n        \"class\": ['v-selection-control__input']\n      }, [icon.value && _createVNode(VIcon, {\n        \"key\": \"icon\",\n        \"icon\": icon.value\n      }, null), _withDirectives(_createVNode(\"input\", _mergeProps({\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"ref\": input,\n        \"disabled\": props.disabled,\n        \"id\": id.value,\n        \"onBlur\": onBlur,\n        \"onFocus\": onFocus,\n        \"aria-readonly\": props.readonly,\n        \"type\": type,\n        \"value\": trueValue.value,\n        \"name\": (_group$name$value = group == null ? void 0 : group.name.value) != null ? _group$name$value : props.name,\n        \"aria-checked\": type === 'checkbox' ? model.value : undefined\n      }, inputAttrs), null), [[_vModelDynamic, model.value]]), (_slots$input = slots.input) == null ? void 0 : _slots$input.call(slots, {\n        model,\n        textColorClasses,\n        props: {\n          onFocus,\n          onBlur,\n          id: id.value\n        }\n      })]), [[_resolveDirective(\"ripple\"), props.ripple && [!props.disabled && !props.readonly, null, ['center', 'circle']]]])]), label && _createVNode(VLabel, {\n        \"for\": id.value\n      }, {\n        default: () => [label]\n      })]);\n    });\n    return {\n      isFocused,\n      input\n    };\n  }\n\n});\nexport function filterControlProps(props) {\n  return pick(props, Object.keys(VSelectionControl.props));\n}","map":{"version":3,"mappings":"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","names":["VIcon","VLabel","VSelectionControlGroupSymbol","Ripple","IconValue","makeDensityProps","useDensity","makeThemeProps","useProxiedModel","useTextColor","computed","inject","ref","deepEqual","filterInputAttrs","genericComponent","getUid","pick","propsFactory","SUPPORTS_FOCUS_VISIBLE","useRender","wrapInArray","makeSelectionControlProps","color","String","disabled","Boolean","error","id","inline","label","falseIcon","trueIcon","ripple","type","default","multiple","name","readonly","trueValue","falseValue","modelValue","value","valueComparator","Function","useSelectionControl","props","group","undefined","densityClasses","isMultiple","Array","isArray","model","get","val","some","v","set","currentValue","newVal","filter","item","textColorClasses","textColorStyles","icon","VSelectionControl","directives","inheritAttrs","emits","setup","attrs","slots","_ref","uid","isFocused","isFocusVisible","input","onFocus","e","target","matches","onBlur","for","rootAttrs","inputAttrs","_slots$default","$event","_slots$input","filterControlProps","Object","keys"],"sources":["../../../src/components/VSelectionControl/VSelectionControl.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControl.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VLabel } from '@/components/VLabel'\nimport { VSelectionControlGroupSymbol } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeThemeProps } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, inject, ref } from 'vue'\nimport {\n  deepEqual,\n  filterInputAttrs,\n  genericComponent,\n  getUid,\n  pick,\n  propsFactory,\n  SUPPORTS_FOCUS_VISIBLE,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { ComputedRef, ExtractPropTypes, PropType, Ref, WritableComputedRef } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nexport type SelectionControlSlot = {\n  model: WritableComputedRef<any>\n  isReadonly: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  textColorClasses: Ref<string[]>\n  props: {\n    onBlur: (e: Event) => void\n    onFocus: (e: FocusEvent) => void\n    id: string\n  }\n}\n\nexport const makeSelectionControlProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  label: String,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: Boolean,\n  trueValue: null,\n  falseValue: null,\n  modelValue: null,\n  type: String,\n  value: null,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeThemeProps(),\n  ...makeDensityProps(),\n})\n\nexport function useSelectionControl (\n  props: ExtractPropTypes<ReturnType<typeof makeSelectionControlProps>> & {\n    'onUpdate:modelValue': ((val: any) => void) | undefined\n  }\n) {\n  const group = inject(VSelectionControlGroupSymbol, undefined)\n  const { densityClasses } = useDensity(props)\n  const modelValue = useProxiedModel(props, 'modelValue')\n  const trueValue = computed(() => (\n    props.trueValue !== undefined ? props.trueValue\n    : props.value !== undefined ? props.value\n    : true\n  ))\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false)\n  const isMultiple = computed(() => (\n    group?.multiple.value ||\n    !!props.multiple ||\n    (props.multiple == null && Array.isArray(modelValue.value))\n  ))\n  const model = computed({\n    get () {\n      const val = group ? group.modelValue.value : modelValue.value\n\n      return isMultiple.value\n        ? val.some((v: any) => props.valueComparator(v, trueValue.value))\n        : props.valueComparator(val, trueValue.value)\n    },\n    set (val: boolean) {\n      if (props.readonly) return\n\n      const currentValue = val ? trueValue.value : falseValue.value\n\n      let newVal = currentValue\n\n      if (isMultiple.value) {\n        newVal = val\n          ? [...wrapInArray(modelValue.value), currentValue]\n          : wrapInArray(modelValue.value).filter((item: any) => !props.valueComparator(item, trueValue.value))\n      }\n\n      if (group) {\n        group.modelValue.value = newVal\n      } else {\n        modelValue.value = newVal\n      }\n    },\n  })\n  const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n    return (\n      model.value &&\n      !props.error &&\n      !props.disabled\n    ) ? props.color : undefined\n  }))\n  const icon = computed(() => {\n    return model.value\n      ? group?.trueIcon.value ?? props.trueIcon\n      : group?.falseIcon.value ?? props.falseIcon\n  })\n\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    icon,\n  }\n}\n\nexport const VSelectionControl = genericComponent<new <T>() => {\n  $props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  }\n  $slots: MakeSlots<{\n    default: []\n    input: [SelectionControlSlot]\n  }>\n}>()({\n  name: 'VSelectionControl',\n\n  directives: { Ripple },\n\n  inheritAttrs: false,\n\n  props: makeSelectionControlProps(),\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const {\n      densityClasses,\n      group,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      trueValue,\n    } = useSelectionControl(props)\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const isFocused = ref(false)\n    const isFocusVisible = ref(false)\n    const input = ref<HTMLInputElement>()\n\n    function onFocus (e: FocusEvent) {\n      isFocused.value = true\n      if (\n        !SUPPORTS_FOCUS_VISIBLE ||\n        (SUPPORTS_FOCUS_VISIBLE && (e.target as HTMLElement).matches(':focus-visible'))\n      ) {\n        isFocusVisible.value = true\n      }\n    }\n\n    function onBlur () {\n      isFocused.value = false\n      isFocusVisible.value = false\n    }\n\n    useRender(() => {\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n      const type = group?.type.value ?? props.type\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      return (\n        <div\n          class={[\n            'v-selection-control',\n            {\n              'v-selection-control--dirty': model.value,\n              'v-selection-control--disabled': props.disabled,\n              'v-selection-control--error': props.error,\n              'v-selection-control--focused': isFocused.value,\n              'v-selection-control--focus-visible': isFocusVisible.value,\n              'v-selection-control--inline': group?.inline.value || props.inline,\n            },\n            densityClasses.value,\n          ]}\n          { ...rootAttrs }\n        >\n          <div\n            class={[\n              'v-selection-control__wrapper',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n          >\n            { slots.default?.() }\n\n            <div\n              class={[\n                'v-selection-control__input',\n              ]}\n              v-ripple={ props.ripple && [\n                !props.disabled && !props.readonly,\n                null,\n                ['center', 'circle'],\n              ]}\n            >\n              { icon.value && <VIcon key=\"icon\" icon={ icon.value } /> }\n\n              <input\n                v-model={ model.value }\n                ref={ input }\n                disabled={ props.disabled }\n                id={ id.value }\n                onBlur={ onBlur }\n                onFocus={ onFocus }\n                aria-readonly={ props.readonly }\n                type={ type }\n                value={ trueValue.value }\n                name={ group?.name.value ?? props.name }\n                aria-checked={ type === 'checkbox' ? model.value : undefined }\n                { ...inputAttrs }\n              />\n\n              { slots.input?.({\n                model,\n                textColorClasses,\n                props: {\n                  onFocus,\n                  onBlur,\n                  id: id.value,\n                },\n              }) }\n            </div>\n          </div>\n\n          { label && (\n            <VLabel for={ id.value }>\n              { label }\n            </VLabel>\n          ) }\n        </div>\n      )\n    })\n\n    return {\n      isFocused,\n      input,\n    }\n  },\n})\n\nexport type VSelectionControl = InstanceType<typeof VSelectionControl>\n\nexport function filterControlProps (props: ExtractPropTypes<ReturnType<typeof makeSelectionControlProps>>) {\n  return pick(props, Object.keys(VSelectionControl.props) as any)\n}\n"]},"metadata":{},"sourceType":"module"}