{"ast":null,"code":"import { useToggleScope } from \"./toggleScope.mjs\";\nimport { computed, onScopeDispose, reactive, readonly, ref, toRaw, watchEffect } from 'vue';\nimport { getCurrentInstance } from \"../util/index.mjs\"; // Types\n\nconst stack = reactive([]);\nexport function useStack(isActive, zIndex) {\n  const vm = getCurrentInstance('useStack');\n\n  const _zIndex = ref(+zIndex.value);\n\n  useToggleScope(isActive, () => {\n    var _stack;\n\n    const lastZIndex = (_stack = stack[stack.length - 1]) == null ? void 0 : _stack[1];\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value;\n    stack.push([vm, _zIndex.value]);\n    onScopeDispose(() => {\n      const idx = stack.findIndex(v => v[0] === vm);\n      stack.splice(idx, 1);\n    });\n  });\n  const isTop = ref(true);\n  watchEffect(() => {\n    var _stack2;\n\n    const _isTop = toRaw((_stack2 = stack[stack.length - 1]) == null ? void 0 : _stack2[0]) === vm;\n\n    setTimeout(() => isTop.value = _isTop);\n  });\n  return {\n    isTop: readonly(isTop),\n    stackStyles: computed(() => ({\n      zIndex: _zIndex.value\n    }))\n  };\n}","map":{"version":3,"mappings":"SAASA,sB;AAET,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,QAAnC,EAA6CC,QAA7C,EAAuDC,GAAvD,EAA4DC,KAA5D,EAAmEC,WAAnE,QAAsF,KAAtF;SACSC,0B,qBAET;;AAGA,MAAMC,KAAK,GAAGN,QAAQ,CAAoD,EAApD,CAAtB;AAEA,OAAO,SAASO,QAAT,CAAmBC,QAAnB,EAAqDC,MAArD,EAA6F;EAClG,MAAMC,EAAE,GAAGL,kBAAkB,CAAC,UAAD,CAA7B;;EAEA,MAAMM,OAAO,GAAGT,GAAG,CAAC,CAACO,MAAM,CAACG,KAAT,CAAnB;;EACAf,cAAc,CAACW,QAAD,EAAW,MAAM;IAAA;;IAC7B,MAAMK,UAAU,aAAGP,KAAK,CAACA,KAAK,CAACQ,MAANR,GAAe,CAAhB,CAAR,qBAAGS,OAA0B,CAA1B,CAAnB;IACAJ,OAAO,CAACC,KAARD,GAAgBE,UAAU,GAAGA,UAAU,GAAG,EAAhB,GAAqB,CAACJ,MAAM,CAACG,KAAvDD;IACAL,KAAK,CAACU,IAANV,CAAW,CAACI,EAAD,EAAKC,OAAO,CAACC,KAAb,CAAXN;IAEAP,cAAc,CAAC,MAAM;MACnB,MAAMkB,GAAG,GAAGX,KAAK,CAACY,SAANZ,CAAgBa,CAAC,IAAIA,CAAC,CAAC,CAAD,CAADA,KAAST,EAA9BJ,CAAZ;MACAA,KAAK,CAACc,MAANd,CAAaW,GAAbX,EAAkB,CAAlBA;IAFY,EAAdP;EALY,EAAdF;EAWA,MAAMwB,KAAK,GAAGnB,GAAG,CAAC,IAAD,CAAjB;EACAE,WAAW,CAAC,MAAM;IAAA;;IAChB,MAAMkB,MAAM,GAAGnB,KAAK,YAACG,KAAK,CAACA,KAAK,CAACQ,MAANR,GAAe,CAAhB,CAAN,qBAACiB,QAA0B,CAA1B,CAAD,CAALpB,KAAwCO,EAAvD;;IACAc,UAAU,CAAC,MAAMH,KAAK,CAACT,KAANS,GAAcC,MAArB,CAAVE;EAFS,EAAXpB;EAKA,OAAO;IACLiB,KAAK,EAAEpB,QAAQ,CAACoB,KAAD,CADV;IAELI,WAAW,EAAE3B,QAAQ,CAAC,OAAO;MAAEW,MAAM,EAAEE,OAAO,CAACC;IAAlB,CAAP,CAAD;EAFhB,CAAP;AAID","names":["useToggleScope","computed","onScopeDispose","reactive","readonly","ref","toRaw","watchEffect","getCurrentInstance","stack","useStack","isActive","zIndex","vm","_zIndex","value","lastZIndex","length","_stack","push","idx","findIndex","v","splice","isTop","_isTop","_stack2","setTimeout","stackStyles"],"sources":["../../src/composables/stack.ts"],"sourcesContent":["import { useToggleScope } from '@/composables/toggleScope'\n\nimport { computed, onScopeDispose, reactive, readonly, ref, toRaw, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, Ref } from 'vue'\n\nconst stack = reactive<[vm: ComponentInternalInstance, zIndex: number][]>([])\n\nexport function useStack (isActive: Readonly<Ref<boolean>>, zIndex: Readonly<Ref<string | number>>) {\n  const vm = getCurrentInstance('useStack')\n\n  const _zIndex = ref(+zIndex.value)\n  useToggleScope(isActive, () => {\n    const lastZIndex = stack[stack.length - 1]?.[1]\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value\n    stack.push([vm, _zIndex.value])\n\n    onScopeDispose(() => {\n      const idx = stack.findIndex(v => v[0] === vm)\n      stack.splice(idx, 1)\n    })\n  })\n\n  const isTop = ref(true)\n  watchEffect(() => {\n    const _isTop = toRaw(stack[stack.length - 1]?.[0]) === vm\n    setTimeout(() => isTop.value = _isTop)\n  })\n\n  return {\n    isTop: readonly(isTop),\n    stackStyles: computed(() => ({ zIndex: _zIndex.value })),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}