{"ast":null,"code":"// Utilities\nimport { computed, inject, provide, ref } from 'vue'; // Types\n// Depth\n\nexport const DepthKey = Symbol.for('vuetify:depth');\nexport function useDepth(hasPrepend) {\n  const parent = inject(DepthKey, ref(-1));\n  const depth = computed(() => parent.value + 1 + (hasPrepend != null && hasPrepend.value ? 1 : 0));\n  provide(DepthKey, depth);\n  return depth;\n} // List\n\nexport const ListKey = Symbol.for('vuetify:list');\nexport function createList() {\n  const parent = inject(ListKey, {\n    hasPrepend: ref(false),\n    updateHasPrepend: () => null\n  });\n  const data = {\n    hasPrepend: ref(false),\n    updateHasPrepend: value => {\n      if (value) data.hasPrepend.value = value;\n    }\n  };\n  provide(ListKey, data);\n  return parent;\n}\nexport function useList() {\n  return inject(ListKey, null);\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,GAApC,QAA+C,KAA/C,C,CAEA;AAGA;;AACA,OAAO,MAAMC,QAAmC,GAAGC,MAAM,CAACC,GAAPD,CAAW,eAAXA,CAA5C;AAEP,OAAO,SAASE,QAAT,CAAmBC,UAAnB,EAA8C;EACnD,MAAMC,MAAM,GAAGR,MAAM,CAACG,QAAD,EAAWD,GAAG,CAAC,CAAC,CAAF,CAAd,CAArB;EAEA,MAAMO,KAAK,GAAGV,QAAQ,CAAC,MAAMS,MAAM,CAACE,KAAPF,GAAe,CAAfA,IAAoBD,UAAU,QAAVA,cAAU,CAAEG,KAAZH,GAAoB,CAApBA,GAAwB,CAA5CC,CAAP,CAAtB;EAEAP,OAAO,CAACE,QAAD,EAAWM,KAAX,CAAPR;EAEA,OAAOQ,KAAP;EAGF;;AACA,OAAO,MAAME,OAGX,GAAGP,MAAM,CAACC,GAAPD,CAAW,cAAXA,CAHE;AAKP,OAAO,SAASQ,UAAT,GAAuB;EAC5B,MAAMJ,MAAM,GAAGR,MAAM,CAACW,OAAD,EAAU;IAAEJ,UAAU,EAAEL,GAAG,CAAC,KAAD,CAAjB;IAA0BW,gBAAgB,EAAE,MAAM;EAAlD,CAAV,CAArB;EAEA,MAAMC,IAAI,GAAG;IACXP,UAAU,EAAEL,GAAG,CAAC,KAAD,CADJ;IAEXW,gBAAgB,EAAGH,KAAD,IAAoB;MACpC,IAAIA,KAAJ,EAAWI,IAAI,CAACP,UAALO,CAAgBJ,KAAhBI,GAAwBJ,KAAxBI;IACZ;EAJU,CAAb;EAOAb,OAAO,CAACU,OAAD,EAAUG,IAAV,CAAPb;EAEA,OAAOO,MAAP;AACD;AAED,OAAO,SAASO,OAAT,GAAoB;EACzB,OAAOf,MAAM,CAACW,OAAD,EAAU,IAAV,CAAb;AACD","names":["computed","inject","provide","ref","DepthKey","Symbol","for","useDepth","hasPrepend","parent","depth","value","ListKey","createList","updateHasPrepend","data","useList"],"sources":["../../../src/components/VList/list.ts"],"sourcesContent":["// Utilities\nimport { computed, inject, provide, ref } from 'vue'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\n// Depth\nexport const DepthKey: InjectionKey<Ref<number>> = Symbol.for('vuetify:depth')\n\nexport function useDepth (hasPrepend?: Ref<boolean>) {\n  const parent = inject(DepthKey, ref(-1))\n\n  const depth = computed(() => parent.value + 1 + (hasPrepend?.value ? 1 : 0))\n\n  provide(DepthKey, depth)\n\n  return depth\n}\n\n// List\nexport const ListKey: InjectionKey<{\n  hasPrepend: Ref<boolean>\n  updateHasPrepend: (value: boolean) => void\n}> = Symbol.for('vuetify:list')\n\nexport function createList () {\n  const parent = inject(ListKey, { hasPrepend: ref(false), updateHasPrepend: () => null })\n\n  const data = {\n    hasPrepend: ref(false),\n    updateHasPrepend: (value: boolean) => {\n      if (value) data.hasPrepend.value = value\n    },\n  }\n\n  provide(ListKey, data)\n\n  return parent\n}\n\nexport function useList () {\n  return inject(ListKey, null)\n}\n"]},"metadata":{},"sourceType":"module"}