{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, vModelDynamic as _vModelDynamic, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VTextField.css\"; // Components\n\nimport { filterFieldProps, makeVFieldProps, VField } from \"../VField/VField.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Composables\n\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, nextTick, ref } from 'vue';\nimport { filterInputAttrs, genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\nexport const VTextField = genericComponent()({\n  name: 'VTextField',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    ...makeVInputProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'click:clear': e => true,\n    'click:control': e => true,\n    'click:input': e => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const counterValue = computed(() => {\n      var _model$value;\n\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : ((_model$value = model.value) != null ? _model$value : '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      var _entries$0$target, _entries$0$target$foc;\n\n      if (!props.autofocus || !isIntersecting) return;\n      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);\n    }\n\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const isFocused = ref(false);\n    const inputRef = ref();\n    const isActive = computed(() => activeTypes.includes(props.type) || props.persistentPlaceholder || isFocused.value);\n    const messages = computed(() => {\n      return props.messages.length ? props.messages : isFocused.value || props.persistentHint ? props.hint : '';\n    });\n\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        var _inputRef$value;\n\n        (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();\n      }\n\n      if (!isFocused.value) isFocused.value = true;\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = '';\n        emit('click:clear', e);\n      });\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = filterInputProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-text-field', {\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant)\n        }],\n        \"onClick:prepend\": attrs['onClick:prepend'],\n        \"onClick:append\": attrs['onClick:append']\n      }, rootAttrs, inputProps, {\n        \"messages\": messages.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"onMousedown\": e => {\n              if (e.target === inputRef.value) return;\n              e.preventDefault();\n            },\n            \"onClick:control\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": attrs['onClick:prependInner'],\n            \"onClick:appendInner\": attrs['onClick:appendInner'],\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), { ...slots,\n            default: _ref3 => {\n              var _slots$default;\n\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _createVNode(\"div\", {\n                \"class\": fieldClass,\n                \"onClick\": e => emit('click:input', e),\n                \"data-no-activator\": \"\"\n              }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), _withDirectives(_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"onUpdate:modelValue\": $event => model.value = $event,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"name\": props.name,\n                \"placeholder\": props.placeholder,\n                \"size\": 1,\n                \"type\": props.type,\n                \"onFocus\": onFocus,\n                \"onBlur\": () => isFocused.value = false\n              }, slotProps, inputAttrs), null), [[_vModelDynamic, model.value], [_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]])]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasCounter ? () => _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value\n        }, slots.counter)]) : undefined\n      });\n    });\n    return useForwardRef({}, vInputRef, vFieldRef, inputRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","VField","filterInputProps","makeVInputProps","VInput","VCounter","Intersect","useForwardRef","useProxiedModel","computed","nextTick","ref","filterInputAttrs","genericComponent","useRender","activeTypes","VTextField","name","directives","inheritAttrs","props","autofocus","Boolean","counter","Number","String","counterValue","Function","hint","persistentHint","prefix","placeholder","persistentPlaceholder","persistentCounter","suffix","type","default","emits","e","val","setup","attrs","emit","slots","_ref","model","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","focus","vInputRef","vFieldRef","isFocused","inputRef","isActive","includes","messages","onFocus","document","activeElement","onControlClick","onClear","stopPropagation","hasCounter","rootAttrs","inputAttrs","modelValue","_","inputProps","fieldProps","$event","variant","_ref2","id","isDisabled","isDirty","isReadonly","isValid","preventDefault","dirty","_ref3","class","fieldClass","slotProps","_slots$default","handler","once","details"],"sources":["../../../src/components/VTextField/VTextField.tsx"],"sourcesContent":["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, ref } from 'vue'\nimport { filterInputAttrs, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\nexport const VTextField = genericComponent<new <T>() => {\n  $slots: VInputSlots & VFieldSlots\n}>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text',\n    },\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:clear': (e: MouseEvent) => true,\n    'click:control': (e: MouseEvent) => true,\n    'click:input': (e: MouseEvent) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const isFocused = ref(false)\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value\n    ))\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isFocused.value || props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) isFocused.value = true\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        emit('click:clear', e)\n      })\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ attrs['onClick:prepend'] }\n          onClick:append={ attrs['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ (e: MouseEvent) => {\n                  if (e.target === inputRef.value) return\n\n                  e.preventDefault()\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ attrs['onClick:prependInner'] }\n                onClick:appendInner={ attrs['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            { props.prefix }\n                          </span>\n                        ) }\n\n                        <div\n                          class={ fieldClass }\n                          onClick={ e => emit('click:input', e) }\n                          data-no-activator=\"\"\n                        >\n                          { slots.default?.() }\n\n                          <input\n                            ref={ inputRef }\n                            v-model={ model.value }\n                            v-intersect={[{\n                              handler: onIntersect,\n                            }, null, ['once']]}\n                            autofocus={ props.autofocus }\n                            readonly={ isReadonly.value }\n                            disabled={ isDisabled.value }\n                            name={ props.name }\n                            placeholder={ props.placeholder }\n                            size={ 1 }\n                            type={ props.type }\n                            onFocus={ onFocus }\n                            onBlur={ () => (isFocused.value = false) }\n                            { ...slotProps }\n                            { ...inputAttrs }\n                          />\n                        </div>\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            { props.suffix }\n                          </span>\n                        ) }\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasCounter ? () => (\n              <>\n                <span />\n\n                <VCounter\n                  active={ props.persistentCounter || isFocused.value }\n                  value={ counterValue.value }\n                  max={ max.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return useForwardRef({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"]},"metadata":{},"sourceType":"module"}